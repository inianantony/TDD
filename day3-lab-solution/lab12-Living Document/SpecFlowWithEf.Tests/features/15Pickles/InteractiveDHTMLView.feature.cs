// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowWithEf.Tests.Features._15Pickles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class InteractiveDHTMLViewFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "InteractiveDHTMLView.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Interactive DHTML View", "In order to increase stakeholder engagement with pickled specs\nAs a SpecFlow evan" +
                    "gelist  \nI want to adjust the level of detail in the DHTML view to suit my audie" +
                    "nce\nSo that I do not overwhelm them.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Interactive DHTML View")))
            {
                SpecFlowWithEf.Tests.Features._15Pickles.InteractiveDHTMLViewFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Scenario with large data table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Interactive DHTML View")]
        public virtual void ScenarioWithLargeDataTable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scenario with large data table", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "heading",
                        "page #"});
            table1.AddRow(new string[] {
                        "Chapter 1",
                        "1"});
            table1.AddRow(new string[] {
                        "Chapter 2",
                        "5"});
            table1.AddRow(new string[] {
                        "Chapter 3",
                        "10"});
            table1.AddRow(new string[] {
                        "Chapter 4",
                        "15"});
            table1.AddRow(new string[] {
                        "Chapter 5",
                        "20"});
            table1.AddRow(new string[] {
                        "Chapter 6",
                        "25"});
            table1.AddRow(new string[] {
                        "Chapter 7",
                        "30"});
            table1.AddRow(new string[] {
                        "Chapter 8",
                        "35"});
            table1.AddRow(new string[] {
                        "Chapter 9",
                        "40"});
            table1.AddRow(new string[] {
                        "Chapter 10",
                        "45"});
            table1.AddRow(new string[] {
                        "Chapter 11",
                        "50"});
            table1.AddRow(new string[] {
                        "Chapter 12",
                        "55"});
            table1.AddRow(new string[] {
                        "Chapter 13",
                        "60"});
            table1.AddRow(new string[] {
                        "Chapter 14",
                        "65"});
            table1.AddRow(new string[] {
                        "Chapter 15",
                        "70"});
            table1.AddRow(new string[] {
                        "Chapter 16",
                        "75"});
            table1.AddRow(new string[] {
                        "Chapter 17",
                        "80"});
            table1.AddRow(new string[] {
                        "Chapter 18",
                        "85"});
            table1.AddRow(new string[] {
                        "Chapter 19",
                        "90"});
            table1.AddRow(new string[] {
                        "Chapter 20",
                        "95"});
            table1.AddRow(new string[] {
                        "Chapter 21",
                        "100"});
            table1.AddRow(new string[] {
                        "Chapter 22",
                        "105"});
#line 8
 testRunner.Given("a feature with a large table of data:", ((string)(null)), table1, "Given ");
#line 32
 testRunner.When("I click on the table heading", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the table body should collapse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
