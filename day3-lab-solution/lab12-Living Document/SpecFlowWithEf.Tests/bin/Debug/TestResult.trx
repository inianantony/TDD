<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="6982cecd-2af2-44ca-b40a-656f47c5aa03" name="joeychen@WANTALMOST-V7 2015-08-26 17:14:04" runUser="Y\joeychen" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Default Test Settings" id="2659e8c8-45ee-42c3-bd03-208384e4f605">
    <Deployment userDeploymentRoot="C:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-solution\lab12-Living Document\SpecFlowWithEf.Tests\bin\Debug" useDefaultDeploymentRoot="false" runDeploymentRoot="joeychen_WANTALMOST-V7 2015-08-26 17_14_04" />
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Properties />
  </TestSettings>
  <Times creation="2015-08-26T17:14:04.3352213+08:00" queuing="2015-08-26T17:14:04.8710053+08:00" start="2015-08-26T17:14:05.0399377+08:00" finish="2015-08-26T17:14:15.7296597+08:00" />
  <ResultSummary outcome="Inconclusive">
    <Counters total="62" executed="62" passed="3" error="0" failed="0" timeout="0" aborted="0" inconclusive="59" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <UnitTest name="ClearTheScreen" storage="specflowwithef.tests.dll" id="e72aa82a-5639-ddc2-819f-95e4564f28a8">
      <Description>Clear the screen</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="workflow" />
        <TestCategoryItem TestCategory="slow" />
      </TestCategory>
      <Execution id="1db1164a-69ba-4c64-9635-39b8deadc152" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Clearing Screen</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.Workflow.ClearingScreenFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ClearTheScreen" />
    </UnitTest>
    <UnitTest name="AddTwoPositiveNumbersWithManyExamples_MoreThan100_1000" storage="specflowwithef.tests.dll" id="283f0994-e586-17ba-1ad3-e54812055854">
      <Description>Add two positive numbers with many examples</Description>
      <Execution id="82449e4a-0cf7-4e52-9f63-66037413fe93" />
      <Properties>
        <Property>
          <Key>Parameter:number 2</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>Parameter:number 1</Key>
          <Value>1000</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>more than 100</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>1000</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario outline</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>1020</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoPositiveNumbersWithManyExamples_MoreThan100_1000" />
    </UnitTest>
    <UnitTest name="AddTwoPositiveNumbersWithManyExamples_MoreThan100_100" storage="specflowwithef.tests.dll" id="d2c44e60-178f-51e2-ac14-c78b3cde6f25">
      <Description>Add two positive numbers with many examples</Description>
      <Execution id="954b4f7c-df11-497e-ae70-a79e349ce9db" />
      <Properties>
        <Property>
          <Key>Parameter:number 2</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>Parameter:number 1</Key>
          <Value>100</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>more than 100</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>100</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario outline</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>120</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoPositiveNumbersWithManyExamples_MoreThan100_100" />
    </UnitTest>
    <UnitTest name="AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant2" storage="specflowwithef.tests.dll" id="a6c6f66f-e304-dd07-d4fd-93c826200351">
      <Description>Add two negative numbers with many examples</Description>
      <Execution id="594d6c5c-6e99-45fc-81c6-dfef87472a2c" />
      <Properties>
        <Property>
          <Key>Parameter:number 1</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>Parameter:number 2</Key>
          <Value>30</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>50</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>less than 100</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario outline</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant2" />
    </UnitTest>
    <UnitTest name="UsingTablesWithSpecFlowAssist" storage="specflowwithef.tests.dll" id="99db4fc7-aa07-6e09-92dd-e6de84a3dc7d">
      <Description>Using tables with SpecFlow Assist</Description>
      <Execution id="9aab93a4-0b22-437f-9a63-12488ebf2190" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Showing table usage</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="UsingTablesWithSpecFlowAssist" />
    </UnitTest>
    <UnitTest name="Add1ToTheSum" storage="specflowwithef.tests.dll" id="242556f0-3c2b-eebb-4b4e-00147af06a7a">
      <Description>Add 1 to the sum</Description>
      <Execution id="9e99a067-25d6-4e12-903c-34f65b4183f9" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Show the use of background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._04Background.ShowTheUseOfBackgroundFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Add1ToTheSum" />
    </UnitTest>
    <UnitTest name="UsingTables" storage="specflowwithef.tests.dll" id="8e8eb3fe-3f3f-d90e-5ee9-cb0286bda458">
      <Description>Using tables</Description>
      <Execution id="7d3c64f5-7d11-492f-86cd-2fc048fb97f0" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Showing table usage</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="UsingTables" />
    </UnitTest>
    <UnitTest name="Add2ToTheSum" storage="specflowwithef.tests.dll" id="4b275d82-7313-672c-a63b-30b24f8c011d">
      <Description>Add 2 to the sum</Description>
      <Execution id="6eae6441-f07c-4eb1-a795-e71417a75f58" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Show the use of background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._04Background.ShowTheUseOfBackgroundFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Add2ToTheSum" />
    </UnitTest>
    <UnitTest name="AddTwoNegativeNumbersWithManyExamples_MoreThan100_100" storage="specflowwithef.tests.dll" id="f03e835e-223e-1332-3673-a4d6b58dd517">
      <Description>Add two negative numbers with many examples</Description>
      <Execution id="0bb655f2-6660-4b97-8d90-35060e41b42e" />
      <Properties>
        <Property>
          <Key>Parameter:number 2</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>Parameter:number 1</Key>
          <Value>100</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>more than 100</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>100</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario outline</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>120</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNegativeNumbersWithManyExamples_MoreThan100_100" />
    </UnitTest>
    <UnitTest name="ShowTheTypeOfStepWeReCurrentlyOn" storage="specflowwithef.tests.dll" id="93266cf1-4b76-db8a-5759-b9c85ba1c1a8">
      <Description>Show the type of step we're currently on</Description>
      <Execution id="724fc864-aea3-4cb9-8546-c19566cf1bda" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Context features</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ShowTheTypeOfStepWeReCurrentlyOn" />
    </UnitTest>
    <UnitTest name="HookingIntoPreConditionsForTestRunsInSpecFlow" storage="specflowwithef.tests.dll" id="3760e8dc-f401-9f2e-3fbb-de1fc16523d0">
      <Description>Hooking into pre conditions for Test Runs in SpecFlow</Description>
      <Execution id="b44399cc-5779-44b4-ae5e-b37af6ee704e" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="HookingIntoPreConditionsForTestRunsInSpecFlow" />
    </UnitTest>
    <UnitTest name="CheckingNumberForEvenness" storage="specflowwithef.tests.dll" id="e0a8228a-559f-1ed3-2153-ad708ca9e022">
      <Description>Checking number for evenness</Description>
      <Execution id="26221be2-5956-4153-b8c8-37a5df1cfea3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Attribute overloading</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._08AttributeOverloading.AttributeOverloadingFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CheckingNumberForEvenness" />
    </UnitTest>
    <UnitTest name="SampleMarkdownScenarioOutlineExample_Value" storage="specflowwithef.tests.dll" id="2fe03437-aed7-6f93-2bca-8bd403ab6807">
      <Description>Sample Markdown Scenario Outline Example</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="AddingATag" />
      </TestCategory>
      <Execution id="211e5b86-7e6b-4f5b-9bb6-95b5b596e7db" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Sample Markdown Feature</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>value</Value>
        </Property>
        <Property>
          <Key>Parameter:test2</Key>
          <Value>value2</Value>
        </Property>
        <Property>
          <Key>Parameter:test</Key>
          <Value>value</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._14MarkdownExample.SampleMarkdownFeatureFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="SampleMarkdownScenarioOutlineExample_Value" />
    </UnitTest>
    <UnitTest name="SubtractTwoNumbers" storage="specflowwithef.tests.dll" id="a6d320e7-2596-0a53-040b-2968bf247b96">
      <Description>Subtract two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="arithmetic" />
        <TestCategoryItem TestCategory="fast" />
      </TestCategory>
      <Execution id="1fd790ab-fc1b-400c-9f88-1f5351ccc2e2" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Arithmetic</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.ArithmeticFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="SubtractTwoNumbers" />
    </UnitTest>
    <UnitTest name="依據姓名訂單日期起的條件查出顧客的訂單" storage="specflowwithef.tests.dll" id="9ef2b9e7-687b-d98f-d478-0d14a0b8fcb1">
      <Description>依據姓名、訂單日期起的條件，查出顧客的訂單</Description>
      <Execution id="909f2fa8-bfd6-47a8-94bf-7c2868ee6fa2" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>OrderQuery</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.OrderQueryFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="依據姓名訂單日期起的條件查出顧客的訂單" />
    </UnitTest>
    <UnitTest name="StoreAndRetrivePersonMarcusFromFeatureContextCurrent" storage="specflowwithef.tests.dll" id="3d338561-a2c3-c33e-a0f9-4aaa6e98e3c0">
      <Description>Store and retrive Person Marcus from FeatureContext Current</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="andThisToo" />
        <TestCategoryItem TestCategory="showUpInScenarioInfo" />
      </TestCategory>
      <Execution id="0d6c166d-90a2-4975-9ef1-e0901c3c005d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>FeatureContext features</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._032FeatureContext.FeatureContextFeaturesFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="StoreAndRetrivePersonMarcusFromFeatureContextCurrent" />
    </UnitTest>
    <UnitTest name="PendingStep" storage="specflowwithef.tests.dll" id="63468769-739d-55fc-4132-7b83be7d7109">
      <Description>Pending step</Description>
      <Execution id="0a9a43b1-f341-4911-a933-a12f9302363f" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Context features</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="PendingStep" />
    </UnitTest>
    <UnitTest name="LogIn" storage="specflowwithef.tests.dll" id="a398b24c-b33b-440e-df36-e91b54ad8f4b">
      <Description>Log in</Description>
      <Execution id="fe9d0a1a-2a91-4342-ba11-1cb97c6ce833" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Calling Steps from StepDefinitions</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="LogIn" />
    </UnitTest>
    <UnitTest name="StoreAndRetrivePersonMarcusFromScenarioContext" storage="specflowwithef.tests.dll" id="50d6f013-3a1c-4591-3a07-cfb38ba41423">
      <Description>Store and retrive Person Marcus from ScenarioContext</Description>
      <Execution id="e3be2df2-0aad-4e2d-86f9-d8644b6b9cfd" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Context features</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="StoreAndRetrivePersonMarcusFromScenarioContext" />
    </UnitTest>
    <UnitTest name="AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant1" storage="specflowwithef.tests.dll" id="da629640-7213-aa75-cfed-49d82d9222b0">
      <Description>Add two positive numbers with many examples</Description>
      <Execution id="e2e061ab-272a-4297-b492-33f4b05f23e8" />
      <Properties>
        <Property>
          <Key>Parameter:number 2</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>Parameter:number 1</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>less than 100</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 1</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario outline</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>40</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant1" />
    </UnitTest>
    <UnitTest name="Tangent" storage="specflowwithef.tests.dll" id="8c2db212-f1a5-7d15-c14f-75b017719c29">
      <Description>Tangent</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="trigonometric" />
        <TestCategoryItem TestCategory="fast" />
      </TestCategory>
      <Execution id="a0ac1d15-2997-4939-bfff-a800d21eccfd" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Trigonometry</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.TrigonometryFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Tangent" />
    </UnitTest>
    <UnitTest name="DivideTwoNumbers" storage="specflowwithef.tests.dll" id="f55c1c9d-9143-dfd3-930d-8aed0cb66071">
      <Description>Divide two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="arithmetic" />
        <TestCategoryItem TestCategory="fast" />
      </TestCategory>
      <Execution id="c2e9d448-ae9d-4588-a76a-e82e8817a17b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Arithmetic</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.ArithmeticFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DivideTwoNumbers" />
    </UnitTest>
    <UnitTest name="Cosine" storage="specflowwithef.tests.dll" id="692c0d07-86a5-0c01-4328-f20ea90fac30">
      <Description>Cosine</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="trigonometric" />
        <TestCategoryItem TestCategory="fast" />
      </TestCategory>
      <Execution id="c4d351d7-3114-455f-8544-1db1d6e891c3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Trigonometry</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.TrigonometryFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Cosine" />
    </UnitTest>
    <UnitTest name="SampleMarkdownScenarioExample" storage="specflowwithef.tests.dll" id="fb584dad-33a2-dfcd-3459-46e9018cfc09">
      <Description>Sample Markdown Scenario Example</Description>
      <Execution id="05444306-9bd2-4ab7-af16-a28841b292d1" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Sample Markdown Feature</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._14MarkdownExample.SampleMarkdownFeatureFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="SampleMarkdownScenarioExample" />
    </UnitTest>
    <UnitTest name="AScenarioWith1Tag" storage="specflowwithef.tests.dll" id="b68313b8-44fe-7c96-acc1-84aee1e31392">
      <Description>A scenario with 1 tag</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="allAboutTags" />
        <TestCategoryItem TestCategory="testTag1" />
        <TestCategoryItem TestCategory="important" />
      </TestCategory>
      <Execution id="a8624169-7d8c-4dbf-8d6f-4b10ba86a5a9" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Tag demonstrator</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AScenarioWith1Tag" />
    </UnitTest>
    <UnitTest name="Sine" storage="specflowwithef.tests.dll" id="79dc898b-b126-08b0-d8c8-d3f836a7f12c">
      <Description>Sine</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="trigonometric" />
        <TestCategoryItem TestCategory="fast" />
      </TestCategory>
      <Execution id="885096a6-d73a-4415-b361-0ab722b9e838" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Trigonometry</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.TrigonometryFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Sine" />
    </UnitTest>
    <UnitTest name="ExampleOfAWideTable" storage="specflowwithef.tests.dll" id="789c654a-7526-7f3b-772f-899479e6cf9e">
      <Description>Example of a wide table</Description>
      <Execution id="cdb2e107-a663-4f04-88d8-500657b64c9c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Showing table usage</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ExampleOfAWideTable" />
    </UnitTest>
    <UnitTest name="FeatureWithMultipleContexts" storage="specflowwithef.tests.dll" id="3d277fd3-faf8-4b8a-c115-f4d2ca70f1bb">
      <Description>Feature with multiple contexts</Description>
      <Execution id="abc9d635-8ce1-4619-96af-787bb4cf3a16" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Injecting context into step specifications</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FeatureWithMultipleContexts" />
    </UnitTest>
    <UnitTest name="AScenarioWithoutTags" storage="specflowwithef.tests.dll" id="e9956b2d-115f-8b99-5b29-ec03f2460b59">
      <Description>A scenario without tags</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="important" />
        <TestCategoryItem TestCategory="allAboutTags" />
      </TestCategory>
      <Execution id="362cd64b-a2c8-47fa-a207-bf14b8880255" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Tag demonstrator</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AScenarioWithoutTags" />
    </UnitTest>
    <UnitTest name="ShowingInformationOfTheScenario" storage="specflowwithef.tests.dll" id="3bfffa52-bdd6-dcaf-db7d-ed49765bbd0d">
      <Description>Showing information of the scenario</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="andThisToo" />
        <TestCategoryItem TestCategory="showUpInScenarioInfo" />
      </TestCategory>
      <Execution id="db6d3fd9-e301-4653-9c4d-16520cfdf465" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Context features</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ShowingInformationOfTheScenario" />
    </UnitTest>
    <UnitTest name="依據姓名訂單日期起訂單日期迄條件查出顧客的訂單" storage="specflowwithef.tests.dll" id="40d16aa0-0970-a41c-fa88-b5585f03c35e">
      <Description>依據姓名、訂單日期起、訂單日期迄條件，查出顧客的訂單</Description>
      <Execution id="987be41e-00ee-4596-b0c8-2bf1ed31036e" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>OrderQuery</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.OrderQueryFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="依據姓名訂單日期起訂單日期迄條件查出顧客的訂單" />
    </UnitTest>
    <UnitTest name="AScenarioWith3Tags" storage="specflowwithef.tests.dll" id="57557adc-2e16-d2b3-9553-973faf95f1f3">
      <Description>A scenario with 3 tags</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="testTag3" />
        <TestCategoryItem TestCategory="testTag1" />
        <TestCategoryItem TestCategory="testTag2" />
        <TestCategoryItem TestCategory="important" />
        <TestCategoryItem TestCategory="allAboutTags" />
      </TestCategory>
      <Execution id="7489c069-b674-4679-9ef2-923c0cda1a55" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Tag demonstrator</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AScenarioWith3Tags" />
    </UnitTest>
    <UnitTest name="Nested_AddTwoNumbers" storage="specflowwithef.tests.dll" id="8135294b-15b3-60e1-9f7a-4d7bee3f448a">
      <Description>Nested - Add two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="nestedFolders" />
      </TestCategory>
      <Execution id="2ef95ef1-eefd-4fed-be70-270cff98c778" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Nested Folder Example</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._12NestedFolders.ChildFolder.ChildChildFolder.NestedFolderExampleFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Nested_AddTwoNumbers" />
    </UnitTest>
    <UnitTest name="HookingIntoPreConditionsForScenariosInSpecFlow" storage="specflowwithef.tests.dll" id="64dbb63e-3428-a393-5900-807ee2bb2513">
      <Description>Hooking into pre conditions for Scenarios in SpecFlow</Description>
      <Execution id="6f2020c5-4138-4e64-a4d9-925a7d887acd" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="HookingIntoPreConditionsForScenariosInSpecFlow" />
    </UnitTest>
    <UnitTest name="AddTwoNumbers" storage="specflowwithef.tests.dll" id="7021b6a2-5d16-7f95-4d4f-ce4896024259">
      <Description>Add two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="arithmetic" />
        <TestCategoryItem TestCategory="fast" />
      </TestCategory>
      <Execution id="82db1f5e-d4d6-4576-8fc3-d8f8ce7c87e3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Arithmetic</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.ArithmeticFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNumbers" />
    </UnitTest>
    <UnitTest name="DoSomethingMeaningful" storage="specflowwithef.tests.dll" id="2076d99b-91be-ac33-b66f-a679254b6240">
      <Description>Do something meaningful</Description>
      <Execution id="0b18891f-bc12-4285-8fed-3851c4fac22c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Calling Steps from StepDefinitions</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DoSomethingMeaningful" />
    </UnitTest>
    <UnitTest name="ACoupleOfSimpleSteps" storage="specflowwithef.tests.dll" id="134d425b-1468-ebc7-f01c-2d96eb116f23">
      <Description>A couple of simple steps</Description>
      <Execution id="2ac16262-df07-4283-97d6-e9caef00846d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>The test runner is not (very) important</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._01TestRunner.TheTestRunnerIsNotVeryImportantFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ACoupleOfSimpleSteps" />
    </UnitTest>
    <UnitTest name="ScenarioWithLargeDataTable" storage="specflowwithef.tests.dll" id="b6262163-a9e4-5cef-a621-cf72819b91a2">
      <Description>Scenario with large data table</Description>
      <Execution id="53586ee3-a180-4c9f-a0d3-63b48d9fca3b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Interactive DHTML View</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._15Pickles.InteractiveDHTMLViewFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ScenarioWithLargeDataTable" />
    </UnitTest>
    <UnitTest name="StepsWithNon_StringArguments" storage="specflowwithef.tests.dll" id="416376aa-6b4e-d71b-6e9d-30e5903109e5">
      <Description>Steps with non-string arguments</Description>
      <Execution id="2c7bf520-0611-4eca-9f6d-c228a66f3f20" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Step Argument Transformations</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._10StepTransformation.StepArgumentTransformationsFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="StepsWithNon_StringArguments" />
    </UnitTest>
    <UnitTest name="UsingAndAndBut" storage="specflowwithef.tests.dll" id="69d62041-3571-1e7d-3bea-03b1290b1b7c">
      <Description>Using And and But</Description>
      <Execution id="ba0fdef1-7f86-403e-86aa-ba8af80d70b6" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Showing basic gherkin syntax</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="UsingAndAndBut" />
    </UnitTest>
    <UnitTest name="AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant0" storage="specflowwithef.tests.dll" id="f9c60788-4417-a2bf-674f-1590c073577f">
      <Description>Add two positive numbers with many examples</Description>
      <Execution id="cd12808e-a60d-412a-b3c0-5145c9b0ef7e" />
      <Properties>
        <Property>
          <Key>Parameter:number 2</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>Parameter:number 1</Key>
          <Value>10</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>less than 100</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 0</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario outline</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>30</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant0" />
    </UnitTest>
    <UnitTest name="HookingIntoPreConditionsForScenarioBlocksInSpecFlow" storage="specflowwithef.tests.dll" id="d561568d-8663-9532-b9e7-a68505b74e95">
      <Description>Hooking into pre conditions for ScenarioBlocks in SpecFlow</Description>
      <Execution id="207417ea-f1e3-4e60-8045-ba81074d1574" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="HookingIntoPreConditionsForScenarioBlocksInSpecFlow" />
    </UnitTest>
    <UnitTest name="MultiplyTwoNumbers" storage="specflowwithef.tests.dll" id="2a414629-7763-fb35-3c7a-406c4ff3a47b">
      <Description>Multiply two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="arithmetic" />
        <TestCategoryItem TestCategory="fast" />
      </TestCategory>
      <Execution id="28e56819-543b-4ebb-874e-022c9cc81ddb" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Arithmetic</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.ArithmeticFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="MultiplyTwoNumbers" />
    </UnitTest>
    <UnitTest name="CompareToSet" storage="specflowwithef.tests.dll" id="e3dbbd11-948c-8b76-6629-9793612feeb3">
      <Description>CompareToSet</Description>
      <Execution id="132c60bd-f0ce-4f76-bc2a-c6f755a6c239" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Show the compare to feature</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._06CompareToAssist.ShowTheCompareToFeatureFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompareToSet" />
    </UnitTest>
    <UnitTest name="AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant0" storage="specflowwithef.tests.dll" id="19e80fc9-7456-ee12-3ec1-caf946f39b80">
      <Description>Add two negative numbers with many examples</Description>
      <Execution id="ccae6282-c4bc-4441-8dfa-18f15c028b98" />
      <Properties>
        <Property>
          <Key>Parameter:number 2</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>Parameter:number 1</Key>
          <Value>10</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>less than 100</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 0</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario outline</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>30</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant0" />
    </UnitTest>
    <UnitTest name="FeatureWithNoContext" storage="specflowwithef.tests.dll" id="61ea2b31-2179-5990-feea-78e46e09c0c9">
      <Description>Feature with no context</Description>
      <Execution id="549bd6bb-df5c-4665-aa7c-a8f81a774386" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Injecting context into step specifications</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FeatureWithNoContext" />
    </UnitTest>
    <UnitTest name="AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant1" storage="specflowwithef.tests.dll" id="28b14da4-bbbf-2755-c7a8-fb04434885c8">
      <Description>Add two negative numbers with many examples</Description>
      <Execution id="d3efd7f4-3556-474f-b403-496ee1858ecc" />
      <Properties>
        <Property>
          <Key>Parameter:number 2</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>Parameter:number 1</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>less than 100</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 1</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario outline</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>40</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant1" />
    </UnitTest>
    <UnitTest name="MutlilineOutput" storage="specflowwithef.tests.dll" id="5d24b2e3-e9cb-1ef1-61cc-bac433923b41">
      <Description>Mutliline Output</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="mytag" />
      </TestCategory>
      <Execution id="077ac75f-3ffe-488e-8bc3-85ee06d6aed4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Multiline Feature Example</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._13MultilineText.MultilineFeatureExampleFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="MutlilineOutput" />
    </UnitTest>
    <UnitTest name="FeatureWithASingleContext" storage="specflowwithef.tests.dll" id="a00db395-b235-f59e-128e-f4b054e851fe">
      <Description>Feature with a single context</Description>
      <Execution id="072776e5-1efa-4f94-948f-651838a11898" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Injecting context into step specifications</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FeatureWithASingleContext" />
    </UnitTest>
    <UnitTest name="HookingIntoPreConditionsForStepsInSpecFlow" storage="specflowwithef.tests.dll" id="368e5e6c-02c3-bb5c-ea76-ad95947818a6">
      <Description>Hooking into pre conditions for Steps in SpecFlow</Description>
      <Execution id="d6559dd6-d6f5-4ec1-b027-2a87c67ee9ac" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="HookingIntoPreConditionsForStepsInSpecFlow" />
    </UnitTest>
    <UnitTest name="FeatureWithADependentContext" storage="specflowwithef.tests.dll" id="4935f965-628b-b964-d5da-bb8013d5b804">
      <Description>Feature with a dependent context</Description>
      <Execution id="3cb90dba-819c-4914-8398-5560a6ad21a4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Injecting context into step specifications</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FeatureWithADependentContext" />
    </UnitTest>
    <UnitTest name="依據姓名訂單日期迄的條件查出顧客的訂單" storage="specflowwithef.tests.dll" id="d67f199d-0cf1-55f8-f698-e7660404c744">
      <Description>依據姓名、訂單日期迄的條件，查出顧客的訂單</Description>
      <Execution id="8389d803-ffac-4785-94a5-58c7a016f88d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>OrderQuery</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features.OrderQueryFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="依據姓名訂單日期迄的條件查出顧客的訂單" />
    </UnitTest>
    <UnitTest name="CreatingAEntityFromFieldValue" storage="specflowwithef.tests.dll" id="34c4b00e-7766-d69f-fbfc-ac543ff84571">
      <Description>Creating a entity from field value</Description>
      <Execution id="513eafe9-aa2b-4bb6-8e72-b423f6075ea3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Showing table usage</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CreatingAEntityFromFieldValue" />
    </UnitTest>
    <UnitTest name="HookingIntoPreConditionsForFeaturesInSpecFlow" storage="specflowwithef.tests.dll" id="ffa12bbd-20d2-98ad-ba20-0fdff9a287db">
      <Description>Hooking into pre conditions for Features in SpecFlow</Description>
      <Execution id="cc082417-93af-43a2-ba22-09a0ef196c0d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="HookingIntoPreConditionsForFeaturesInSpecFlow" />
    </UnitTest>
    <UnitTest name="Summera5Och7SkaVara12" storage="specflowwithef.tests.dll" id="a4ac222e-78e2-5043-a63e-540c695e9528">
      <Description>Summera 5 och 7 ska vara 12</Description>
      <Execution id="163961bc-0dff-4e13-bf15-19ddee35dd90" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Summering</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._07Svenska.SummeringFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="Summera5Och7SkaVara12" />
    </UnitTest>
    <UnitTest name="AScenarioWith2Tags" storage="specflowwithef.tests.dll" id="f30b2437-c99c-5c4c-9ce6-8194c84a6b2d">
      <Description>A scenario with 2 tags</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="allAboutTags" />
        <TestCategoryItem TestCategory="testTag1" />
        <TestCategoryItem TestCategory="testTag3" />
        <TestCategoryItem TestCategory="important" />
      </TestCategory>
      <Execution id="ce787142-80a5-4a20-8f42-7cf0896fe759" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Tag demonstrator</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AScenarioWith2Tags" />
    </UnitTest>
    <UnitTest name="SimpleGWT" storage="specflowwithef.tests.dll" id="afaa0fa1-3376-2890-e139-f7e84f4fa281">
      <Description>Simple GWT</Description>
      <Execution id="c859ec1d-44dd-4c82-be4f-cd2ea26b6d3e" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Showing basic gherkin syntax</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="SimpleGWT" />
    </UnitTest>
    <UnitTest name="AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant2" storage="specflowwithef.tests.dll" id="e5e84bbd-5a20-3634-6c7b-3ba63d413b5e">
      <Description>Add two positive numbers with many examples</Description>
      <Execution id="fcffd0fa-a05e-4571-b881-485c3cf44e62" />
      <Properties>
        <Property>
          <Key>Parameter:number 2</Key>
          <Value>30</Value>
        </Property>
        <Property>
          <Key>Parameter:number 1</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>less than 100</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 2</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario outline</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>50</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant2" />
    </UnitTest>
    <UnitTest name="CompareToInstance" storage="specflowwithef.tests.dll" id="b121f9a2-d320-5094-c4de-242f5e3dc779">
      <Description>CompareToInstance</Description>
      <Execution id="424b0d16-92f9-4986-8f86-c6044f977e0a" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Show the compare to feature</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._06CompareToAssist.ShowTheCompareToFeatureFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="CompareToInstance" />
    </UnitTest>
    <UnitTest name="AddTwoNegativeNumbersWithManyExamples_MoreThan100_1000" storage="specflowwithef.tests.dll" id="5ede2ad3-f4b8-7963-013e-143b85304ff9">
      <Description>Add two negative numbers with many examples</Description>
      <Execution id="019d2729-34ca-474f-9f71-922f111878b3" />
      <Properties>
        <Property>
          <Key>Parameter:number 2</Key>
          <Value>20</Value>
        </Property>
        <Property>
          <Key>Parameter:number 1</Key>
          <Value>1000</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>more than 100</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>1000</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario outline</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>1020</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNegativeNumbersWithManyExamples_MoreThan100_1000" />
    </UnitTest>
    <UnitTest name="ShowingInformationOfTheFeature" storage="specflowwithef.tests.dll" id="cdb26274-0473-500d-73f4-4529bf7a056e">
      <Description>Showing information of the feature</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="andThisToo" />
        <TestCategoryItem TestCategory="showUpInScenarioInfo" />
      </TestCategory>
      <Execution id="d5b455cc-0271-4492-bf01-cf58d0fd1383" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>FeatureContext features</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._032FeatureContext.FeatureContextFeaturesFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ShowingInformationOfTheFeature" />
    </UnitTest>
    <UnitTest name="FeatureWithRecursiveContexts" storage="specflowwithef.tests.dll" id="2682258a-3984-0b3d-f9f6-776cf30e4949">
      <Description>Feature with recursive contexts</Description>
      <Execution id="de7d34fc-59ad-4097-bc42-7054371bee53" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Injecting context into step specifications</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/joeychen/Dropbox/skill tree 課程/201510 第四梯/lab/day3-lab-solution/lab12-Living Document/SpecFlowWithEf.Tests/bin/Debug/SpecFlowWithEf.Tests.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature, SpecFlowWithEf.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FeatureWithRecursiveContexts" />
    </UnitTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry testId="afaa0fa1-3376-2890-e139-f7e84f4fa281" executionId="c859ec1d-44dd-4c82-be4f-cd2ea26b6d3e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="69d62041-3571-1e7d-3bea-03b1290b1b7c" executionId="ba0fdef1-7f86-403e-86aa-ba8af80d70b6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="134d425b-1468-ebc7-f01c-2d96eb116f23" executionId="2ac16262-df07-4283-97d6-e9caef00846d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ffa12bbd-20d2-98ad-ba20-0fdff9a287db" executionId="cc082417-93af-43a2-ba22-09a0ef196c0d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d561568d-8663-9532-b9e7-a68505b74e95" executionId="207417ea-f1e3-4e60-8045-ba81074d1574" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="64dbb63e-3428-a393-5900-807ee2bb2513" executionId="6f2020c5-4138-4e64-a4d9-925a7d887acd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="368e5e6c-02c3-bb5c-ea76-ad95947818a6" executionId="d6559dd6-d6f5-4ec1-b027-2a87c67ee9ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3760e8dc-f401-9f2e-3fbb-de1fc16523d0" executionId="b44399cc-5779-44b4-ae5e-b37af6ee704e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b68313b8-44fe-7c96-acc1-84aee1e31392" executionId="a8624169-7d8c-4dbf-8d6f-4b10ba86a5a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f30b2437-c99c-5c4c-9ce6-8194c84a6b2d" executionId="ce787142-80a5-4a20-8f42-7cf0896fe759" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="57557adc-2e16-d2b3-9553-973faf95f1f3" executionId="7489c069-b674-4679-9ef2-923c0cda1a55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e9956b2d-115f-8b99-5b29-ec03f2460b59" executionId="362cd64b-a2c8-47fa-a207-bf14b8880255" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63468769-739d-55fc-4132-7b83be7d7109" executionId="0a9a43b1-f341-4911-a933-a12f9302363f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3bfffa52-bdd6-dcaf-db7d-ed49765bbd0d" executionId="db6d3fd9-e301-4653-9c4d-16520cfdf465" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93266cf1-4b76-db8a-5759-b9c85ba1c1a8" executionId="724fc864-aea3-4cb9-8546-c19566cf1bda" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50d6f013-3a1c-4591-3a07-cfb38ba41423" executionId="e3be2df2-0aad-4e2d-86f9-d8644b6b9cfd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cdb26274-0473-500d-73f4-4529bf7a056e" executionId="d5b455cc-0271-4492-bf01-cf58d0fd1383" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d338561-a2c3-c33e-a0f9-4aaa6e98e3c0" executionId="0d6c166d-90a2-4975-9ef1-e0901c3c005d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19e80fc9-7456-ee12-3ec1-caf946f39b80" executionId="ccae6282-c4bc-4441-8dfa-18f15c028b98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28b14da4-bbbf-2755-c7a8-fb04434885c8" executionId="d3efd7f4-3556-474f-b403-496ee1858ecc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a6c6f66f-e304-dd07-d4fd-93c826200351" executionId="594d6c5c-6e99-45fc-81c6-dfef87472a2c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f03e835e-223e-1332-3673-a4d6b58dd517" executionId="0bb655f2-6660-4b97-8d90-35060e41b42e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ede2ad3-f4b8-7963-013e-143b85304ff9" executionId="019d2729-34ca-474f-9f71-922f111878b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9c60788-4417-a2bf-674f-1590c073577f" executionId="cd12808e-a60d-412a-b3c0-5145c9b0ef7e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="da629640-7213-aa75-cfed-49d82d9222b0" executionId="e2e061ab-272a-4297-b492-33f4b05f23e8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e5e84bbd-5a20-3634-6c7b-3ba63d413b5e" executionId="fcffd0fa-a05e-4571-b881-485c3cf44e62" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d2c44e60-178f-51e2-ac14-c78b3cde6f25" executionId="954b4f7c-df11-497e-ae70-a79e349ce9db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="283f0994-e586-17ba-1ad3-e54812055854" executionId="82449e4a-0cf7-4e52-9f63-66037413fe93" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="242556f0-3c2b-eebb-4b4e-00147af06a7a" executionId="9e99a067-25d6-4e12-903c-34f65b4183f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4b275d82-7313-672c-a63b-30b24f8c011d" executionId="6eae6441-f07c-4eb1-a795-e71417a75f58" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34c4b00e-7766-d69f-fbfc-ac543ff84571" executionId="513eafe9-aa2b-4bb6-8e72-b423f6075ea3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="789c654a-7526-7f3b-772f-899479e6cf9e" executionId="cdb2e107-a663-4f04-88d8-500657b64c9c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e8eb3fe-3f3f-d90e-5ee9-cb0286bda458" executionId="7d3c64f5-7d11-492f-86cd-2fc048fb97f0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99db4fc7-aa07-6e09-92dd-e6de84a3dc7d" executionId="9aab93a4-0b22-437f-9a63-12488ebf2190" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b121f9a2-d320-5094-c4de-242f5e3dc779" executionId="424b0d16-92f9-4986-8f86-c6044f977e0a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e3dbbd11-948c-8b76-6629-9793612feeb3" executionId="132c60bd-f0ce-4f76-bc2a-c6f755a6c239" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a4ac222e-78e2-5043-a63e-540c695e9528" executionId="163961bc-0dff-4e13-bf15-19ddee35dd90" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e0a8228a-559f-1ed3-2153-ad708ca9e022" executionId="26221be2-5956-4153-b8c8-37a5df1cfea3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2076d99b-91be-ac33-b66f-a679254b6240" executionId="0b18891f-bc12-4285-8fed-3851c4fac22c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a398b24c-b33b-440e-df36-e91b54ad8f4b" executionId="fe9d0a1a-2a91-4342-ba11-1cb97c6ce833" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="416376aa-6b4e-d71b-6e9d-30e5903109e5" executionId="2c7bf520-0611-4eca-9f6d-c228a66f3f20" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4935f965-628b-b964-d5da-bb8013d5b804" executionId="3cb90dba-819c-4914-8398-5560a6ad21a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a00db395-b235-f59e-128e-f4b054e851fe" executionId="072776e5-1efa-4f94-948f-651838a11898" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d277fd3-faf8-4b8a-c115-f4d2ca70f1bb" executionId="abc9d635-8ce1-4619-96af-787bb4cf3a16" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="61ea2b31-2179-5990-feea-78e46e09c0c9" executionId="549bd6bb-df5c-4665-aa7c-a8f81a774386" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2682258a-3984-0b3d-f9f6-776cf30e4949" executionId="de7d34fc-59ad-4097-bc42-7054371bee53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8135294b-15b3-60e1-9f7a-4d7bee3f448a" executionId="2ef95ef1-eefd-4fed-be70-270cff98c778" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5d24b2e3-e9cb-1ef1-61cc-bac433923b41" executionId="077ac75f-3ffe-488e-8bc3-85ee06d6aed4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb584dad-33a2-dfcd-3459-46e9018cfc09" executionId="05444306-9bd2-4ab7-af16-a28841b292d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fe03437-aed7-6f93-2bca-8bd403ab6807" executionId="211e5b86-7e6b-4f5b-9bb6-95b5b596e7db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b6262163-a9e4-5cef-a621-cf72819b91a2" executionId="53586ee3-a180-4c9f-a0d3-63b48d9fca3b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7021b6a2-5d16-7f95-4d4f-ce4896024259" executionId="82db1f5e-d4d6-4576-8fc3-d8f8ce7c87e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f55c1c9d-9143-dfd3-930d-8aed0cb66071" executionId="c2e9d448-ae9d-4588-a76a-e82e8817a17b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a414629-7763-fb35-3c7a-406c4ff3a47b" executionId="28e56819-543b-4ebb-874e-022c9cc81ddb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a6d320e7-2596-0a53-040b-2968bf247b96" executionId="1fd790ab-fc1b-400c-9f88-1f5351ccc2e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d67f199d-0cf1-55f8-f698-e7660404c744" executionId="8389d803-ffac-4785-94a5-58c7a016f88d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ef2b9e7-687b-d98f-d478-0d14a0b8fcb1" executionId="909f2fa8-bfd6-47a8-94bf-7c2868ee6fa2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="40d16aa0-0970-a41c-fa88-b5585f03c35e" executionId="987be41e-00ee-4596-b0c8-2bf1ed31036e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="692c0d07-86a5-0c01-4328-f20ea90fac30" executionId="c4d351d7-3114-455f-8544-1db1d6e891c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="79dc898b-b126-08b0-d8c8-d3f836a7f12c" executionId="885096a6-d73a-4415-b361-0ab722b9e838" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c2db212-f1a5-7d15-c14f-75b017719c29" executionId="a0ac1d15-2997-4939-bfff-a800d21eccfd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e72aa82a-5639-ddc2-819f-95e4564f28a8" executionId="1db1164a-69ba-4c64-9635-39b8deadc152" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <UnitTestResult executionId="c859ec1d-44dd-4c82-be4f-cd2ea26b6d3e" testId="afaa0fa1-3376-2890-e139-f7e84f4fa281" testName="SimpleGWT" computerName="WANTALMOST-V7" duration="00:00:00.0821203" startTime="2015-08-26T17:14:05.1069109+08:00" endTime="2015-08-26T17:14:05.6666869+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c859ec1d-44dd-4c82-be4f-cd2ea26b6d3e">
      <Output>
        <StdOut>Given the initial state of the application is Running
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"the initial state of the application is Running")]
        public void GivenTheInitialStateOfTheApplicationIsRunning()
        {
            ScenarioContext.Current.Pending();
        }

When I ask what the application state is
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I ask what the application state is")]
        public void WhenIAskWhatTheApplicationStateIs()
        {
            ScenarioContext.Current.Pending();
        }

Then I should see Running as the answer
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"I should see Running as the answer")]
        public void ThenIShouldSeeRunningAsTheAnswer()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"the initial state of the application is Running")]
        public void GivenTheInitialStateOfTheApplicationIsRunning()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I ask what the application state is")]
        public void WhenIAskWhatTheApplicationStateIs()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"I should see Running as the answer")]
        public void ThenIShouldSeeRunningAsTheAnswer()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\00BasicGherkin\BasicGherkin.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature.SimpleGWT() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\00BasicGherkin\BasicGherkin.feature:line 11
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ba0fdef1-7f86-403e-86aa-ba8af80d70b6" testId="69d62041-3571-1e7d-3bea-03b1290b1b7c" testName="UsingAndAndBut" computerName="WANTALMOST-V7" duration="00:00:00.0138185" startTime="2015-08-26T17:14:05.6686861+08:00" endTime="2015-08-26T17:14:05.6856793+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ba0fdef1-7f86-403e-86aa-ba8af80d70b6">
      <Output>
        <StdOut>Given the initial state of the application is Running
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"the initial state of the application is Running")]
        public void GivenTheInitialStateOfTheApplicationIsRunning()
        {
            ScenarioContext.Current.Pending();
        }

And I have authorization to ask application state
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have authorization to ask application state")]
        public void GivenIHaveAuthorizationToAskApplicationState()
        {
            ScenarioContext.Current.Pending();
        }

When I ask what the application state is
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I ask what the application state is")]
        public void WhenIAskWhatTheApplicationStateIs()
        {
            ScenarioContext.Current.Pending();
        }

Then I should see Running as the answer
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"I should see Running as the answer")]
        public void ThenIShouldSeeRunningAsTheAnswer()
        {
            ScenarioContext.Current.Pending();
        }

And I should see the time of the application
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"I should see the time of the application")]
        public void ThenIShouldSeeTheTimeOfTheApplication()
        {
            ScenarioContext.Current.Pending();
        }

But the state of the application should not be Stopped
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the state of the application should not be Stopped")]
        public void ThenTheStateOfTheApplicationShouldNotBeStopped()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"the initial state of the application is Running")]
        public void GivenTheInitialStateOfTheApplicationIsRunning()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Given(@"I have authorization to ask application state")]
        public void GivenIHaveAuthorizationToAskApplicationState()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I ask what the application state is")]
        public void WhenIAskWhatTheApplicationStateIs()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"I should see Running as the answer")]
        public void ThenIShouldSeeRunningAsTheAnswer()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"I should see the time of the application")]
        public void ThenIShouldSeeTheTimeOfTheApplication()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the state of the application should not be Stopped")]
        public void ThenTheStateOfTheApplicationShouldNotBeStopped()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\00BasicGherkin\BasicGherkin.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature.UsingAndAndBut() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\00BasicGherkin\BasicGherkin.feature:line 19
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2ac16262-df07-4283-97d6-e9caef00846d" testId="134d425b-1468-ebc7-f01c-2d96eb116f23" testName="ACoupleOfSimpleSteps" computerName="WANTALMOST-V7" duration="00:00:00.0044566" startTime="2015-08-26T17:14:05.6876785+08:00" endTime="2015-08-26T17:14:05.6956753+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ac16262-df07-4283-97d6-e9caef00846d">
      <Output>
        <StdOut>Given I have step defintions in place
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have step defintions in place")]
        public void GivenIHaveStepDefintionsInPlace()
        {
            ScenarioContext.Current.Pending();
        }

When I call a step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I call a step")]
        public void WhenICallAStep()
        {
            ScenarioContext.Current.Pending();
        }

Then the step should have been called
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the step should have been called")]
        public void ThenTheStepShouldHaveBeenCalled()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have step defintions in place")]
        public void GivenIHaveStepDefintionsInPlace()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I call a step")]
        public void WhenICallAStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the step should have been called")]
        public void ThenTheStepShouldHaveBeenCalled()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._01TestRunner.TheTestRunnerIsNotVeryImportantFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\01TestRunner\TestRunnerIsNotImportant.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._01TestRunner.TheTestRunnerIsNotVeryImportantFeature.ACoupleOfSimpleSteps() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\01TestRunner\TestRunnerIsNotImportant.feature:line 9
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cc082417-93af-43a2-ba22-09a0ef196c0d" testId="ffa12bbd-20d2-98ad-ba20-0fdff9a287db" testName="HookingIntoPreConditionsForFeaturesInSpecFlow" computerName="WANTALMOST-V7" duration="00:00:00.0036202" startTime="2015-08-26T17:14:05.6976745+08:00" endTime="2015-08-26T17:14:05.7036721+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc082417-93af-43a2-ba22-09a0ef196c0d">
      <Output>
        <StdOut>Given the scenario is running
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"the scenario is running")]
        public void GivenTheScenarioIsRunning()
        {
            ScenarioContext.Current.Pending();
        }

Then the BeforeFeature hook should have been executed
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the BeforeFeature hook should have been executed")]
        public void ThenTheBeforeFeatureHookShouldHaveBeenExecuted()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"the scenario is running")]
        public void GivenTheScenarioIsRunning()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the BeforeFeature hook should have been executed")]
        public void ThenTheBeforeFeatureHookShouldHaveBeenExecuted()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\Hooks.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature.HookingIntoPreConditionsForFeaturesInSpecFlow() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\Hooks.feature:line 12
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="207417ea-f1e3-4e60-8045-ba81074d1574" testId="d561568d-8663-9532-b9e7-a68505b74e95" testName="HookingIntoPreConditionsForScenarioBlocksInSpecFlow" computerName="WANTALMOST-V7" duration="00:00:00.0030707" startTime="2015-08-26T17:14:05.7056713+08:00" endTime="2015-08-26T17:14:05.7106693+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="207417ea-f1e3-4e60-8045-ba81074d1574">
      <Output>
        <StdOut>Given the scenario is running
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"the scenario is running")]
        public void GivenTheScenarioIsRunning()
        {
            ScenarioContext.Current.Pending();
        }

Then the BeforeScenarioBlock hook should have been executed
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the BeforeScenarioBlock hook should have been executed")]
        public void ThenTheBeforeScenarioBlockHookShouldHaveBeenExecuted()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"the scenario is running")]
        public void GivenTheScenarioIsRunning()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the BeforeScenarioBlock hook should have been executed")]
        public void ThenTheBeforeScenarioBlockHookShouldHaveBeenExecuted()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\Hooks.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature.HookingIntoPreConditionsForScenarioBlocksInSpecFlow() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\Hooks.feature:line 20
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6f2020c5-4138-4e64-a4d9-925a7d887acd" testId="64dbb63e-3428-a393-5900-807ee2bb2513" testName="HookingIntoPreConditionsForScenariosInSpecFlow" computerName="WANTALMOST-V7" duration="00:00:00.0031006" startTime="2015-08-26T17:14:05.7126685+08:00" endTime="2015-08-26T17:14:05.7176665+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f2020c5-4138-4e64-a4d9-925a7d887acd">
      <Output>
        <StdOut>Given the scenario is running
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"the scenario is running")]
        public void GivenTheScenarioIsRunning()
        {
            ScenarioContext.Current.Pending();
        }

Then the BeforeScenario hook should have been executed
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the BeforeScenario hook should have been executed")]
        public void ThenTheBeforeScenarioHookShouldHaveBeenExecuted()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"the scenario is running")]
        public void GivenTheScenarioIsRunning()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the BeforeScenario hook should have been executed")]
        public void ThenTheBeforeScenarioHookShouldHaveBeenExecuted()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\Hooks.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature.HookingIntoPreConditionsForScenariosInSpecFlow() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\Hooks.feature:line 16
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d6559dd6-d6f5-4ec1-b027-2a87c67ee9ac" testId="368e5e6c-02c3-bb5c-ea76-ad95947818a6" testName="HookingIntoPreConditionsForStepsInSpecFlow" computerName="WANTALMOST-V7" duration="00:00:00.0033386" startTime="2015-08-26T17:14:05.7186661+08:00" endTime="2015-08-26T17:14:05.7246637+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d6559dd6-d6f5-4ec1-b027-2a87c67ee9ac">
      <Output>
        <StdOut>Given the scenario is running
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"the scenario is running")]
        public void GivenTheScenarioIsRunning()
        {
            ScenarioContext.Current.Pending();
        }

Then the BeforeStep hook should have been executed
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the BeforeStep hook should have been executed")]
        public void ThenTheBeforeStepHookShouldHaveBeenExecuted()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"the scenario is running")]
        public void GivenTheScenarioIsRunning()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the BeforeStep hook should have been executed")]
        public void ThenTheBeforeStepHookShouldHaveBeenExecuted()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\Hooks.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature.HookingIntoPreConditionsForStepsInSpecFlow() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\Hooks.feature:line 24
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b44399cc-5779-44b4-ae5e-b37af6ee704e" testId="3760e8dc-f401-9f2e-3fbb-de1fc16523d0" testName="HookingIntoPreConditionsForTestRunsInSpecFlow" computerName="WANTALMOST-V7" duration="00:00:00.0031841" startTime="2015-08-26T17:14:05.7256633+08:00" endTime="2015-08-26T17:14:05.7306613+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b44399cc-5779-44b4-ae5e-b37af6ee704e">
      <Output>
        <StdOut>Given the scenario is running
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"the scenario is running")]
        public void GivenTheScenarioIsRunning()
        {
            ScenarioContext.Current.Pending();
        }

Then the BeforeTestRun hook should have been executed
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the BeforeTestRun hook should have been executed")]
        public void ThenTheBeforeTestRunHookShouldHaveBeenExecuted()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"the scenario is running")]
        public void GivenTheScenarioIsRunning()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the BeforeTestRun hook should have been executed")]
        public void ThenTheBeforeTestRunHookShouldHaveBeenExecuted()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\Hooks.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.AdditionFeature.HookingIntoPreConditionsForTestRunsInSpecFlow() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\Hooks.feature:line 8
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a8624169-7d8c-4dbf-8d6f-4b10ba86a5a9" testId="b68313b8-44fe-7c96-acc1-84aee1e31392" testName="AScenarioWith1Tag" computerName="WANTALMOST-V7" duration="00:00:00.0056696" startTime="2015-08-26T17:14:05.7326605+08:00" endTime="2015-08-26T17:14:05.7416569+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8624169-7d8c-4dbf-8d6f-4b10ba86a5a9">
      <Output>
        <StdOut>Given that my scenario has 1 tags
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"that my scenario has (.*) tags")]
        public void GivenThatMyScenarioHasTags(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I run the scenario
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I run the scenario")]
        public void WhenIRunTheScenario()
        {
            ScenarioContext.Current.Pending();
        }

Then before scenario hook with 'testTag1' is run
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"before scenario hook with '(.*)' is run")]
        public void ThenBeforeScenarioHookWithIsRun(string p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"that my scenario has (.*) tags")]
        public void GivenThatMyScenarioHasTags(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I run the scenario")]
        public void WhenIRunTheScenario()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"before scenario hook with '(.*)' is run")]
        public void ThenBeforeScenarioHookWithIsRun(string p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\TagDemo.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature.AScenarioWith1Tag() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\TagDemo.feature:line 23
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ce787142-80a5-4a20-8f42-7cf0896fe759" testId="f30b2437-c99c-5c4c-9ce6-8194c84a6b2d" testName="AScenarioWith2Tags" computerName="WANTALMOST-V7" duration="00:00:00.0040333" startTime="2015-08-26T17:14:05.7436561+08:00" endTime="2015-08-26T17:14:05.7496537+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce787142-80a5-4a20-8f42-7cf0896fe759">
      <Output>
        <StdOut>Given that my scenario has 2 tags
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"that my scenario has (.*) tags")]
        public void GivenThatMyScenarioHasTags(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I run the scenario
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I run the scenario")]
        public void WhenIRunTheScenario()
        {
            ScenarioContext.Current.Pending();
        }

Then before scenario hook with 'testTag1, testTag3' is run
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"before scenario hook with '(.*)' is run")]
        public void ThenBeforeScenarioHookWithIsRun(string p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"that my scenario has (.*) tags")]
        public void GivenThatMyScenarioHasTags(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I run the scenario")]
        public void WhenIRunTheScenario()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"before scenario hook with '(.*)' is run")]
        public void ThenBeforeScenarioHookWithIsRun(string p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\TagDemo.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature.AScenarioWith2Tags() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\TagDemo.feature:line 35
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7489c069-b674-4679-9ef2-923c0cda1a55" testId="57557adc-2e16-d2b3-9553-973faf95f1f3" testName="AScenarioWith3Tags" computerName="WANTALMOST-V7" duration="00:00:00.0044094" startTime="2015-08-26T17:14:05.7506533+08:00" endTime="2015-08-26T17:14:05.7576505+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7489c069-b674-4679-9ef2-923c0cda1a55">
      <Output>
        <StdOut>Given that my scenario has 3 tags
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"that my scenario has (.*) tags")]
        public void GivenThatMyScenarioHasTags(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I run the scenario
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I run the scenario")]
        public void WhenIRunTheScenario()
        {
            ScenarioContext.Current.Pending();
        }

Then before scenario hook with 'testTag1, testTag2, testTag3' is run
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"before scenario hook with '(.*)' is run")]
        public void ThenBeforeScenarioHookWithIsRun(string p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"that my scenario has (.*) tags")]
        public void GivenThatMyScenarioHasTags(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I run the scenario")]
        public void WhenIRunTheScenario()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"before scenario hook with '(.*)' is run")]
        public void ThenBeforeScenarioHookWithIsRun(string p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\TagDemo.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature.AScenarioWith3Tags() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\TagDemo.feature:line 29
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="362cd64b-a2c8-47fa-a207-bf14b8880255" testId="e9956b2d-115f-8b99-5b29-ec03f2460b59" testName="AScenarioWithoutTags" computerName="WANTALMOST-V7" duration="00:00:00.0040395" startTime="2015-08-26T17:14:05.7586501+08:00" endTime="2015-08-26T17:14:05.7646477+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="362cd64b-a2c8-47fa-a207-bf14b8880255">
      <Output>
        <StdOut>Given that my scenario has 0 tags
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"that my scenario has (.*) tags")]
        public void GivenThatMyScenarioHasTags(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I run the scenario
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I run the scenario")]
        public void WhenIRunTheScenario()
        {
            ScenarioContext.Current.Pending();
        }

Then before scenario hook with '' is run
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"before scenario hook with '(.*)' is run")]
        public void ThenBeforeScenarioHookWithIsRun(string p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"that my scenario has (.*) tags")]
        public void GivenThatMyScenarioHasTags(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I run the scenario")]
        public void WhenIRunTheScenario()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"before scenario hook with '(.*)' is run")]
        public void ThenBeforeScenarioHookWithIsRun(string p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\TagDemo.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._02TagsAndHooks.TagDemonstratorFeature.AScenarioWithoutTags() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\02TagsAndHooks\TagDemo.feature:line 17
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0a9a43b1-f341-4911-a933-a12f9302363f" testId="63468769-739d-55fc-4132-7b83be7d7109" testName="PendingStep" computerName="WANTALMOST-V7" duration="00:00:00.0040501" startTime="2015-08-26T17:14:05.7666469+08:00" endTime="2015-08-26T17:14:05.7736441+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a9a43b1-f341-4911-a933-a12f9302363f">
      <Output>
        <StdOut>When I set the ScenarioContext.Current to pending
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I set the ScenarioContext\.Current to pending")]
        public void WhenISetTheScenarioContext_CurrentToPending()
        {
            ScenarioContext.Current.Pending();
        }

Then this step will not even be executed
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"this step will not even be executed")]
        public void ThenThisStepWillNotEvenBeExecuted()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [When(@"I set the ScenarioContext\.Current to pending")]
        public void WhenISetTheScenarioContext_CurrentToPending()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"this step will not even be executed")]
        public void ThenThisStepWillNotEvenBeExecuted()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\031ScenarioContext\ScenarioContext.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature.PendingStep() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\031ScenarioContext\ScenarioContext.feature:line 32
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="db6d3fd9-e301-4653-9c4d-16520cfdf465" testId="3bfffa52-bdd6-dcaf-db7d-ed49765bbd0d" testName="ShowingInformationOfTheScenario" computerName="WANTALMOST-V7" duration="00:00:00.0065536" startTime="2015-08-26T17:14:05.7756433+08:00" endTime="2015-08-26T17:14:05.7836401+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="db6d3fd9-e301-4653-9c4d-16520cfdf465">
      <Output>
        <StdOut>When I execute any scenario
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I execute any scenario")]
        public void WhenIExecuteAnyScenario()
        {
            ScenarioContext.Current.Pending();
        }

Then the ScenarioInfo contains the following information
  --- table step argument ---
  | Field | Value                               |
  | Tags  | showUpInScenarioInfo, andThisToo    |
  | Title | Showing information of the scenario |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the ScenarioInfo contains the following information")]
        public void ThenTheScenarioInfoContainsTheFollowingInformation(Table table)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [When(@"I execute any scenario")]
        public void WhenIExecuteAnyScenario()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the ScenarioInfo contains the following information")]
        public void ThenTheScenarioInfoContainsTheFollowingInformation(Table table)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\031ScenarioContext\ScenarioContext.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature.ShowingInformationOfTheScenario() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\031ScenarioContext\ScenarioContext.feature:line 13
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="724fc864-aea3-4cb9-8546-c19566cf1bda" testId="93266cf1-4b76-db8a-5759-b9c85ba1c1a8" testName="ShowTheTypeOfStepWeReCurrentlyOn" computerName="WANTALMOST-V7" duration="00:00:00.0054272" startTime="2015-08-26T17:14:05.7856393+08:00" endTime="2015-08-26T17:14:05.7936361+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="724fc864-aea3-4cb9-8546-c19566cf1bda">
      <Output>
        <StdOut>Given I have a Given step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have a Given step")]
        public void GivenIHaveAGivenStep()
        {
            ScenarioContext.Current.Pending();
        }

And I have another Given step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have another Given step")]
        public void GivenIHaveAnotherGivenStep()
        {
            ScenarioContext.Current.Pending();
        }

When I have a When step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I have a When step")]
        public void WhenIHaveAWhenStep()
        {
            ScenarioContext.Current.Pending();
        }

Then I have a Then step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"I have a Then step")]
        public void ThenIHaveAThenStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have a Given step")]
        public void GivenIHaveAGivenStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Given(@"I have another Given step")]
        public void GivenIHaveAnotherGivenStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I have a When step")]
        public void WhenIHaveAWhenStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"I have a Then step")]
        public void ThenIHaveAThenStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\031ScenarioContext\ScenarioContext.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature.ShowTheTypeOfStepWeReCurrentlyOn() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\031ScenarioContext\ScenarioContext.feature:line 22
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e3be2df2-0aad-4e2d-86f9-d8644b6b9cfd" testId="50d6f013-3a1c-4591-3a07-cfb38ba41423" testName="StoreAndRetrivePersonMarcusFromScenarioContext" computerName="WANTALMOST-V7" duration="00:00:00.0032228" startTime="2015-08-26T17:14:05.7956353+08:00" endTime="2015-08-26T17:14:05.8006333+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e3be2df2-0aad-4e2d-86f9-d8644b6b9cfd">
      <Output>
        <StdOut>When I store a person called Marcus in the Current ScenarioContext
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I store a person called Marcus in the Current ScenarioContext")]
        public void WhenIStoreAPersonCalledMarcusInTheCurrentScenarioContext()
        {
            ScenarioContext.Current.Pending();
        }

Then a person called Marcus can easily be retrieved
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"a person called Marcus can easily be retrieved")]
        public void ThenAPersonCalledMarcusCanEasilyBeRetrieved()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [When(@"I store a person called Marcus in the Current ScenarioContext")]
        public void WhenIStoreAPersonCalledMarcusInTheCurrentScenarioContext()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"a person called Marcus can easily be retrieved")]
        public void ThenAPersonCalledMarcusCanEasilyBeRetrieved()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\031ScenarioContext\ScenarioContext.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._031ScenarioContext.ScenarioContextFeaturesFeature.StoreAndRetrivePersonMarcusFromScenarioContext() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\031ScenarioContext\ScenarioContext.feature:line 8
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d5b455cc-0271-4492-bf01-cf58d0fd1383" testId="cdb26274-0473-500d-73f4-4529bf7a056e" testName="ShowingInformationOfTheFeature" computerName="WANTALMOST-V7" duration="00:00:00.0038499" startTime="2015-08-26T17:14:05.8016329+08:00" endTime="2015-08-26T17:14:05.8086301+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d5b455cc-0271-4492-bf01-cf58d0fd1383">
      <Output>
        <StdOut>When I execute any scenario in the feature
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I execute any scenario in the feature")]
        public void WhenIExecuteAnyScenarioInTheFeature()
        {
            ScenarioContext.Current.Pending();
        }

Then the FeatureInfo contains the following information
  --- table step argument ---
  | Field          | Value                            |
  | Tags           | showUpInScenarioInfo, andThisToo |
  | Title          | FeatureContext features          |
  | TargetLanguage | CSharp                           |
  | Language       | en-US                            |
  | Description    | In order to                      |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the FeatureInfo contains the following information")]
        public void ThenTheFeatureInfoContainsTheFollowingInformation(Table table)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [When(@"I execute any scenario in the feature")]
        public void WhenIExecuteAnyScenarioInTheFeature()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the FeatureInfo contains the following information")]
        public void ThenTheFeatureInfoContainsTheFollowingInformation(Table table)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._032FeatureContext.FeatureContextFeaturesFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\032FeatureContext\FeatureContextFeatures.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._032FeatureContext.FeatureContextFeaturesFeature.ShowingInformationOfTheFeature() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\032FeatureContext\FeatureContextFeatures.feature:line 13
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0d6c166d-90a2-4975-9ef1-e0901c3c005d" testId="3d338561-a2c3-c33e-a0f9-4aaa6e98e3c0" testName="StoreAndRetrivePersonMarcusFromFeatureContextCurrent" computerName="WANTALMOST-V7" duration="00:00:00.0046678" startTime="2015-08-26T17:14:05.8106293+08:00" endTime="2015-08-26T17:14:05.8166269+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d6c166d-90a2-4975-9ef1-e0901c3c005d">
      <Output>
        <StdOut>When I store a person called Marcus in the current FeatureContext
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I store a person called Marcus in the current FeatureContext")]
        public void WhenIStoreAPersonCalledMarcusInTheCurrentFeatureContext()
        {
            ScenarioContext.Current.Pending();
        }

Then a person called Marcus can easily be retrieved from the current FeatureContext
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"a person called Marcus can easily be retrieved from the current FeatureContext")]
        public void ThenAPersonCalledMarcusCanEasilyBeRetrievedFromTheCurrentFeatureContext()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [When(@"I store a person called Marcus in the current FeatureContext")]
        public void WhenIStoreAPersonCalledMarcusInTheCurrentFeatureContext()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"a person called Marcus can easily be retrieved from the current FeatureContext")]
        public void ThenAPersonCalledMarcusCanEasilyBeRetrievedFromTheCurrentFeatureContext()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._032FeatureContext.FeatureContextFeaturesFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\032FeatureContext\FeatureContextFeatures.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._032FeatureContext.FeatureContextFeaturesFeature.StoreAndRetrivePersonMarcusFromFeatureContextCurrent() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\032FeatureContext\FeatureContextFeatures.feature:line 9
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ccae6282-c4bc-4441-8dfa-18f15c028b98" testId="19e80fc9-7456-ee12-3ec1-caf946f39b80" testName="AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant0" computerName="WANTALMOST-V7" duration="00:00:00.0059574" startTime="2015-08-26T17:14:05.8186261+08:00" endTime="2015-08-26T17:14:05.8276225+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ccae6282-c4bc-4441-8dfa-18f15c028b98">
      <Output>
        <StdOut>Given I enter 10 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I perform add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 30
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoNegativeNumbersWithManyExamples(String number1, String number2, String result, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature:line 30
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant0() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d3efd7f4-3556-474f-b403-496ee1858ecc" testId="28b14da4-bbbf-2755-c7a8-fb04434885c8" testName="AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant1" computerName="WANTALMOST-V7" duration="00:00:00.0047978" startTime="2015-08-26T17:14:05.8296217+08:00" endTime="2015-08-26T17:14:05.8366189+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3efd7f4-3556-474f-b403-496ee1858ecc">
      <Output>
        <StdOut>Given I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I perform add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 40
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoNegativeNumbersWithManyExamples(String number1, String number2, String result, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature:line 30
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant1() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="594d6c5c-6e99-45fc-81c6-dfef87472a2c" testId="a6c6f66f-e304-dd07-d4fd-93c826200351" testName="AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant2" computerName="WANTALMOST-V7" duration="00:00:00.0058436" startTime="2015-08-26T17:14:05.8376185+08:00" endTime="2015-08-26T17:14:05.8456153+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="594d6c5c-6e99-45fc-81c6-dfef87472a2c">
      <Output>
        <StdOut>Given I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I enter 30 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I perform add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 50
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoNegativeNumbersWithManyExamples(String number1, String number2, String result, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature:line 30
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoNegativeNumbersWithManyExamples_LessThan100_Variant2() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0bb655f2-6660-4b97-8d90-35060e41b42e" testId="f03e835e-223e-1332-3673-a4d6b58dd517" testName="AddTwoNegativeNumbersWithManyExamples_MoreThan100_100" computerName="WANTALMOST-V7" duration="00:00:00.0051066" startTime="2015-08-26T17:14:05.8476145+08:00" endTime="2015-08-26T17:14:05.8546117+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bb655f2-6660-4b97-8d90-35060e41b42e">
      <Output>
        <StdOut>Given I enter 100 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I perform add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 120
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoNegativeNumbersWithManyExamples(String number1, String number2, String result, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature:line 30
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoNegativeNumbersWithManyExamples_MoreThan100_100() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="019d2729-34ca-474f-9f71-922f111878b3" testId="5ede2ad3-f4b8-7963-013e-143b85304ff9" testName="AddTwoNegativeNumbersWithManyExamples_MoreThan100_1000" computerName="WANTALMOST-V7" duration="00:00:00.0058193" startTime="2015-08-26T17:14:05.8566109+08:00" endTime="2015-08-26T17:14:05.8646077+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="019d2729-34ca-474f-9f71-922f111878b3">
      <Output>
        <StdOut>Given I enter 1000 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I perform add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 1020
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoNegativeNumbersWithManyExamples(String number1, String number2, String result, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature:line 30
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoNegativeNumbersWithManyExamples_MoreThan100_1000() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd12808e-a60d-412a-b3c0-5145c9b0ef7e" testId="f9c60788-4417-a2bf-674f-1590c073577f" testName="AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant0" computerName="WANTALMOST-V7" duration="00:00:00.0053455" startTime="2015-08-26T17:14:05.8666069+08:00" endTime="2015-08-26T17:14:05.8736041+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd12808e-a60d-412a-b3c0-5145c9b0ef7e">
      <Output>
        <StdOut>Given I enter 10 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I perform add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 30
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples(String number1, String number2, String result, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature:line 12
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant0() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e2e061ab-272a-4297-b492-33f4b05f23e8" testId="da629640-7213-aa75-cfed-49d82d9222b0" testName="AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant1" computerName="WANTALMOST-V7" duration="00:00:00.0052522" startTime="2015-08-26T17:14:05.8756033+08:00" endTime="2015-08-26T17:14:05.8826005+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e2e061ab-272a-4297-b492-33f4b05f23e8">
      <Output>
        <StdOut>Given I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I perform add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 40
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples(String number1, String number2, String result, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature:line 12
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant1() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fcffd0fa-a05e-4571-b881-485c3cf44e62" testId="e5e84bbd-5a20-3634-6c7b-3ba63d413b5e" testName="AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant2" computerName="WANTALMOST-V7" duration="00:00:00.0051254" startTime="2015-08-26T17:14:05.8845997+08:00" endTime="2015-08-26T17:14:05.8915969+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcffd0fa-a05e-4571-b881-485c3cf44e62">
      <Output>
        <StdOut>Given I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I enter 30 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I perform add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 50
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples(String number1, String number2, String result, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature:line 12
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples_LessThan100_Variant2() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="954b4f7c-df11-497e-ae70-a79e349ce9db" testId="d2c44e60-178f-51e2-ac14-c78b3cde6f25" testName="AddTwoPositiveNumbersWithManyExamples_MoreThan100_100" computerName="WANTALMOST-V7" duration="00:00:00.0061521" startTime="2015-08-26T17:14:05.8935961+08:00" endTime="2015-08-26T17:14:05.9005933+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="954b4f7c-df11-497e-ae70-a79e349ce9db">
      <Output>
        <StdOut>Given I enter 100 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I perform add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 120
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples(String number1, String number2, String result, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature:line 12
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples_MoreThan100_100() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="82449e4a-0cf7-4e52-9f63-66037413fe93" testId="283f0994-e586-17ba-1ad3-e54812055854" testName="AddTwoPositiveNumbersWithManyExamples_MoreThan100_1000" computerName="WANTALMOST-V7" duration="00:00:00.0050145" startTime="2015-08-26T17:14:05.9025925+08:00" endTime="2015-08-26T17:14:05.9095897+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="82449e4a-0cf7-4e52-9f63-66037413fe93">
      <Output>
        <StdOut>Given I enter 1000 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I enter 20 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I perform add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 1020
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I enter (.*) into the calculator")]
        public void GivenIEnterIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I perform add")]
        public void WhenIPerformAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*)")]
        public void ThenTheResultShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples(String number1, String number2, String result, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature:line 12
   at SpecFlowWithEf.Tests.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples_MoreThan100_1000() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\03ScenarioOutline\ScenarioOutline.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e99a067-25d6-4e12-903c-34f65b4183f9" testId="242556f0-3c2b-eebb-4b4e-00147af06a7a" testName="Add1ToTheSum" computerName="WANTALMOST-V7" duration="00:00:00.0060234" startTime="2015-08-26T17:14:05.9105893+08:00" endTime="2015-08-26T17:14:05.9195857+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e99a067-25d6-4e12-903c-34f65b4183f9">
      <Output>
        <StdOut>Given I have initialized the Sum-variable to 0
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have initialized the Sum-variable to (.*)")]
        public void GivenIHaveInitializedTheSum_VariableTo(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I add 1 to the Sum-variable
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I add (.*) to the Sum-variable")]
        public void WhenIAddToTheSum_Variable(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I add 1 to the Sum-variable
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I add (.*) to the Sum-variable")]
        public void WhenIAddToTheSum_Variable(int p0)
        {
            ScenarioContext.Current.Pending();
        }

Then the total sum should be 2
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the total sum should be (.*)")]
        public void ThenTheTotalSumShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have initialized the Sum-variable to (.*)")]
        public void GivenIHaveInitializedTheSum_VariableTo(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I add (.*) to the Sum-variable")]
        public void WhenIAddToTheSum_Variable(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the total sum should be (.*)")]
        public void ThenTheTotalSumShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._04Background.ShowTheUseOfBackgroundFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\04Background\BackgroundFeature.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._04Background.ShowTheUseOfBackgroundFeature.Add1ToTheSum() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\04Background\BackgroundFeature.feature:line 12
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6eae6441-f07c-4eb1-a795-e71417a75f58" testId="4b275d82-7313-672c-a63b-30b24f8c011d" testName="Add2ToTheSum" computerName="WANTALMOST-V7" duration="00:00:00.0058478" startTime="2015-08-26T17:14:05.9215849+08:00" endTime="2015-08-26T17:14:05.9295817+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6eae6441-f07c-4eb1-a795-e71417a75f58">
      <Output>
        <StdOut>Given I have initialized the Sum-variable to 0
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have initialized the Sum-variable to (.*)")]
        public void GivenIHaveInitializedTheSum_VariableTo(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I add 1 to the Sum-variable
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I add (.*) to the Sum-variable")]
        public void WhenIAddToTheSum_Variable(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I add 2 to the Sum-variable
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I add (.*) to the Sum-variable")]
        public void WhenIAddToTheSum_Variable(int p0)
        {
            ScenarioContext.Current.Pending();
        }

Then the total sum should be 3
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the total sum should be (.*)")]
        public void ThenTheTotalSumShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have initialized the Sum-variable to (.*)")]
        public void GivenIHaveInitializedTheSum_VariableTo(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I add (.*) to the Sum-variable")]
        public void WhenIAddToTheSum_Variable(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the total sum should be (.*)")]
        public void ThenTheTotalSumShouldBe(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._04Background.ShowTheUseOfBackgroundFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\04Background\BackgroundFeature.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._04Background.ShowTheUseOfBackgroundFeature.Add2ToTheSum() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\04Background\BackgroundFeature.feature:line 16
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="513eafe9-aa2b-4bb6-8e72-b423f6075ea3" testId="34c4b00e-7766-d69f-fbfc-ac543ff84571" testName="CreatingAEntityFromFieldValue" computerName="WANTALMOST-V7" duration="00:00:00.0041756" startTime="2015-08-26T17:14:05.9315809+08:00" endTime="2015-08-26T17:14:05.9385781+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="513eafe9-aa2b-4bb6-8e72-b423f6075ea3">
      <Output>
        <StdOut>When I fill out the form like this
  --- table step argument ---
  | Field      | Value      |
  | Name       | Marcus     |
  | Style      | very cool  |
  | Birth date | 1972-10-09 |
  | Cred       | 100        |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I fill out the form like this")]
        public void WhenIFillOutTheFormLikeThis(Table table)
        {
            ScenarioContext.Current.Pending();
        }

Then the following person should be returned using assist
  --- table step argument ---
  | Name   | Style     | Birth date | Cred |
  | Marcus | Very cool | 1972-10-09 | 1000 |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the following person should be returned using assist")]
        public void ThenTheFollowingPersonShouldBeReturnedUsingAssist(Table table)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [When(@"I fill out the form like this")]
        public void WhenIFillOutTheFormLikeThis(Table table)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the following person should be returned using assist")]
        public void ThenTheFollowingPersonShouldBeReturnedUsingAssist(Table table)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\05TablesAndAssist\TableScenario.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature.CreatingAEntityFromFieldValue() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\05TablesAndAssist\TableScenario.feature:line 35
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cdb2e107-a663-4f04-88d8-500657b64c9c" testId="789c654a-7526-7f3b-772f-899479e6cf9e" testName="ExampleOfAWideTable" computerName="WANTALMOST-V7" duration="00:00:00.0133722" startTime="2015-08-26T17:14:05.9405773+08:00" endTime="2015-08-26T17:14:05.9645677+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cdb2e107-a663-4f04-88d8-500657b64c9c">
      <Output>
        <StdOut>Given this wide table
  --- table step argument ---
  | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred |
  | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"this wide table")]
        public void GivenThisWideTable(Table table)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this wide table")]
        public void GivenThisWideTable(Table table)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\05TablesAndAssist\TableScenario.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature.ExampleOfAWideTable() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\05TablesAndAssist\TableScenario.feature:line 40
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d3c64f5-7d11-492f-86cd-2fc048fb97f0" testId="8e8eb3fe-3f3f-d90e-5ee9-cb0286bda458" testName="UsingTables" computerName="WANTALMOST-V7" duration="00:00:00.0292596" startTime="2015-08-26T17:14:05.9665669+08:00" endTime="2015-08-26T17:14:06.0065509+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d3c64f5-7d11-492f-86cd-2fc048fb97f0">
      <Output>
        <StdOut>Given I have the following persons
  --- table step argument ---
  | Name   | Style | Birth date | Cred |
  | Marcus | Cool  | 1972-10-09 | 50   |
  | Anders | Butch | 1977-01-01 | 500  |
  | Jocke  | Soft  | 1974-04-04 | 1000 |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have the following persons")]
        public void GivenIHaveTheFollowingPersons(Table table)
        {
            ScenarioContext.Current.Pending();
        }

When I search for Jocke
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I search for Jocke")]
        public void WhenISearchForJocke()
        {
            ScenarioContext.Current.Pending();
        }

Then the following person should be returned
  --- table step argument ---
  | Name  | Style | Birth date | Cred |
  | Jocke | Soft  | 1974-04-04 | 1000 |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the following person should be returned")]
        public void ThenTheFollowingPersonShouldBeReturned(Table table)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have the following persons")]
        public void GivenIHaveTheFollowingPersons(Table table)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I search for Jocke")]
        public void WhenISearchForJocke()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the following person should be returned")]
        public void ThenTheFollowingPersonShouldBeReturned(Table table)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\05TablesAndAssist\TableScenario.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature.UsingTables() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\05TablesAndAssist\TableScenario.feature:line 13
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9aab93a4-0b22-437f-9a63-12488ebf2190" testId="99db4fc7-aa07-6e09-92dd-e6de84a3dc7d" testName="UsingTablesWithSpecFlowAssist" computerName="WANTALMOST-V7" duration="00:00:00.0280500" startTime="2015-08-26T17:14:06.0085501+08:00" endTime="2015-08-26T17:14:06.0465349+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9aab93a4-0b22-437f-9a63-12488ebf2190">
      <Output>
        <StdOut>Given I have the following persons using assist
  --- table step argument ---
  | Name   | Style     | Birth date | Cred |
  | Marcus | Very cool | 1972-10-09 | 50   |
  | Anders | Butch     | 1977-01-01 | 500  |
  | Jocke  | Soft      | 1974-04-04 | 1000 |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have the following persons using assist")]
        public void GivenIHaveTheFollowingPersonsUsingAssist(Table table)
        {
            ScenarioContext.Current.Pending();
        }

When I search for Jocke
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I search for Jocke")]
        public void WhenISearchForJocke()
        {
            ScenarioContext.Current.Pending();
        }

Then the following person should be returned using assist
  --- table step argument ---
  | Name  | Style | Birth date | Cred |
  | Jocke | Soft  | 1974-04-04 | 1000 |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the following person should be returned using assist")]
        public void ThenTheFollowingPersonShouldBeReturnedUsingAssist(Table table)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have the following persons using assist")]
        public void GivenIHaveTheFollowingPersonsUsingAssist(Table table)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I search for Jocke")]
        public void WhenISearchForJocke()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the following person should be returned using assist")]
        public void ThenTheFollowingPersonShouldBeReturnedUsingAssist(Table table)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\05TablesAndAssist\TableScenario.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._05TablesAndAssist.ShowingTableUsageFeature.UsingTablesWithSpecFlowAssist() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\05TablesAndAssist\TableScenario.feature:line 24
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="424b0d16-92f9-4986-8f86-c6044f977e0a" testId="b121f9a2-d320-5094-c4de-242f5e3dc779" testName="CompareToInstance" computerName="WANTALMOST-V7" duration="00:00:00.0341907" startTime="2015-08-26T17:14:06.0485341+08:00" endTime="2015-08-26T17:14:06.1005133+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="424b0d16-92f9-4986-8f86-c6044f977e0a">
      <Output>
        <StdOut>Given I have the following person
  --- table step argument ---
  | Field      | Value      |
  | Name       | Marcus     |
  | Style      | Butch      |
  | Birth date | 1972-10-09 |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have the following person")]
        public void GivenIHaveTheFollowingPerson(Table table)
        {
            ScenarioContext.Current.Pending();
        }

Then CompareToInstance should match this guy
  --- table step argument ---
  | Field     | Value                 |
  | Name      | Marcus                |
  | Style     | Butch                 |
  | BirthDate | 10/9/1972 12:00:00 AM |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"CompareToInstance should match this guy")]
        public void ThenCompareToInstanceShouldMatchThisGuy(Table table)
        {
            ScenarioContext.Current.Pending();
        }

And CompareToInstance should match this guy
  --- table step argument ---
  | Field     | Value                 |
  | Name      | Marcus                |
  | BirthDate | 10/9/1972 12:00:00 AM |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"CompareToInstance should match this guy")]
        public void ThenCompareToInstanceShouldMatchThisGuy(Table table)
        {
            ScenarioContext.Current.Pending();
        }

But CompareToInstance should not match this guy
  --- table step argument ---
  | Field     | Value                 |
  | Name      | Anders                |
  | Style     | very cool             |
  | BirthDate | 10/9/1974 12:00:00 AM |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"CompareToInstance should not match this guy")]
        public void ThenCompareToInstanceShouldNotMatchThisGuy(Table table)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have the following person")]
        public void GivenIHaveTheFollowingPerson(Table table)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"CompareToInstance should match this guy")]
        public void ThenCompareToInstanceShouldMatchThisGuy(Table table)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"CompareToInstance should not match this guy")]
        public void ThenCompareToInstanceShouldNotMatchThisGuy(Table table)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._06CompareToAssist.ShowTheCompareToFeatureFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\06CompareToAssist\CompareTo.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._06CompareToAssist.ShowTheCompareToFeatureFeature.CompareToInstance() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\06CompareToAssist\CompareTo.feature:line 23
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="132c60bd-f0ce-4f76-bc2a-c6f755a6c239" testId="e3dbbd11-948c-8b76-6629-9793612feeb3" testName="CompareToSet" computerName="WANTALMOST-V7" duration="00:00:00.0257423" startTime="2015-08-26T17:14:06.1025125+08:00" endTime="2015-08-26T17:14:06.1394977+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="132c60bd-f0ce-4f76-bc2a-c6f755a6c239">
      <Output>
        <StdOut>Given I have the following persons using assist
  --- table step argument ---
  | Name   | Style | Birth date |
  | Marcus | Cool  | 1972-10-09 |
  | Anders | Butch | 1977-01-01 |
  | Jocke  | Soft  | 1974-04-04 |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have the following persons using assist")]
        public void GivenIHaveTheFollowingPersonsUsingAssist(Table table)
        {
            ScenarioContext.Current.Pending();
        }

Then CompareToSet should match this
  --- table step argument ---
  | Name   | Style | BirthDate             |
  | Marcus | Cool  | 10/9/1972 12:00:00 AM |
  | Anders | Butch | 1/1/1977 12:00:00 AM  |
  | Jocke  | Soft  | 4/4/1974 12:00:00 AM  |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"CompareToSet should match this")]
        public void ThenCompareToSetShouldMatchThis(Table table)
        {
            ScenarioContext.Current.Pending();
        }

But CompareToSet should not match this
  --- table step argument ---
  | Name   | Style | BirthDate             |
  | Marcus | Cool  | 10/9/1972 12:00:00 AM |
  | Anders | Butch | 1/1/1977 12:00:00 AM  |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"CompareToSet should not match this")]
        public void ThenCompareToSetShouldNotMatchThis(Table table)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have the following persons using assist")]
        public void GivenIHaveTheFollowingPersonsUsingAssist(Table table)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"CompareToSet should match this")]
        public void ThenCompareToSetShouldMatchThis(Table table)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"CompareToSet should not match this")]
        public void ThenCompareToSetShouldNotMatchThis(Table table)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._06CompareToAssist.ShowTheCompareToFeatureFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\06CompareToAssist\CompareTo.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._06CompareToAssist.ShowTheCompareToFeatureFeature.CompareToSet() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\06CompareToAssist\CompareTo.feature:line 42
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="163961bc-0dff-4e13-bf15-19ddee35dd90" testId="a4ac222e-78e2-5043-a63e-540c695e9528" testName="Summera5Och7SkaVara12" computerName="WANTALMOST-V7" duration="00:00:00.0316322" startTime="2015-08-26T17:14:06.1414969+08:00" endTime="2015-08-26T17:14:06.1974745+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="163961bc-0dff-4e13-bf15-19ddee35dd90">
      <Output>
        <StdOut>Givet att jag har knappat in 5
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"att jag har knappat in (.*)")]
        public void GivetAttJagHarKnappatIn(int p0)
        {
            ScenarioContext.Current.Pending();
        }

Och att jag har knappat in 7
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"att jag har knappat in (.*)")]
        public void GivetAttJagHarKnappatIn(int p0)
        {
            ScenarioContext.Current.Pending();
        }

När jag summerar
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"jag summerar")]
        public void NarJagSummerar()
        {
            ScenarioContext.Current.Pending();
        }

Så ska resultatet vara 12
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"ska resultatet vara (.*)")]
        public void SaSkaResultatetVara(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"att jag har knappat in (.*)")]
        public void GivetAttJagHarKnappatIn(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"jag summerar")]
        public void NarJagSummerar()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"ska resultatet vara (.*)")]
        public void SaSkaResultatetVara(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._07Svenska.SummeringFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\07Svenska\Svenska.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._07Svenska.SummeringFeature.Summera5Och7SkaVara12() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\07Svenska\Svenska.feature:line 13
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26221be2-5956-4153-b8c8-37a5df1cfea3" testId="e0a8228a-559f-1ed3-2153-ad708ca9e022" testName="CheckingNumberForEvenness" computerName="WANTALMOST-V7" duration="00:00:00.0599305" startTime="2015-08-26T17:14:06.2004733+08:00" endTime="2015-08-26T17:14:06.2764429+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26221be2-5956-4153-b8c8-37a5df1cfea3">
      <Output>
        <StdOut>Given I have this simple step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have this simple step")]
        public void GivenIHaveThisSimpleStep()
        {
            ScenarioContext.Current.Pending();
        }

And this simple step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"this simple step")]
        public void GivenThisSimpleStep()
        {
            ScenarioContext.Current.Pending();
        }

And also this step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"also this step")]
        public void GivenAlsoThisStep()
        {
            ScenarioContext.Current.Pending();
        }

When I do something
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I do something")]
        public void WhenIDoSomething()
        {
            ScenarioContext.Current.Pending();
        }

Then I could validate that the number 2 is even
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"I could validate that the number (.*) is even")]
        public void ThenICouldValidateThatTheNumberIsEven(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And that the number 4 is even
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"that the number (.*) is even")]
        public void ThenThatTheNumberIsEven(int p0)
        {
            ScenarioContext.Current.Pending();
        }

But the number 3 is odd
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the number (.*) is odd")]
        public void ThenTheNumberIsOdd(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have this simple step")]
        public void GivenIHaveThisSimpleStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Given(@"this simple step")]
        public void GivenThisSimpleStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Given(@"also this step")]
        public void GivenAlsoThisStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I do something")]
        public void WhenIDoSomething()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"I could validate that the number (.*) is even")]
        public void ThenICouldValidateThatTheNumberIsEven(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"that the number (.*) is even")]
        public void ThenThatTheNumberIsEven(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the number (.*) is odd")]
        public void ThenTheNumberIsOdd(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._08AttributeOverloading.AttributeOverloadingFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\08AttributeOverloading\AttributeOverloading.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._08AttributeOverloading.AttributeOverloadingFeature.CheckingNumberForEvenness() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\08AttributeOverloading\AttributeOverloading.feature:line 13
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0b18891f-bc12-4285-8fed-3851c4fac22c" testId="2076d99b-91be-ac33-b66f-a679254b6240" testName="DoSomethingMeaningful" computerName="WANTALMOST-V7" duration="00:00:00.0471395" startTime="2015-08-26T17:14:06.2794417+08:00" endTime="2015-08-26T17:14:06.3534121+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0b18891f-bc12-4285-8fed-3851c4fac22c">
      <Output>
        <StdOut>Given I am logged in
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I am logged in")]
        public void GivenIAmLoggedIn()
        {
            ScenarioContext.Current.Pending();
        }

When I dosomething meaningful
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I dosomething meaningful")]
        public void WhenIDosomethingMeaningful()
        {
            ScenarioContext.Current.Pending();
        }

Then I should get rewarded
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"I should get rewarded")]
        public void ThenIShouldGetRewarded()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I am logged in")]
        public void GivenIAmLoggedIn()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I dosomething meaningful")]
        public void WhenIDosomethingMeaningful()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"I should get rewarded")]
        public void ThenIShouldGetRewarded()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\09CallingStepsFromSteps\CallingStepsFromSteps.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature.DoSomethingMeaningful() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\09CallingStepsFromSteps\CallingStepsFromSteps.feature:line 15
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fe9d0a1a-2a91-4342-ba11-1cb97c6ce833" testId="a398b24c-b33b-440e-df36-e91b54ad8f4b" testName="LogIn" computerName="WANTALMOST-V7" duration="00:00:00.0517015" startTime="2015-08-26T17:14:06.3574105+08:00" endTime="2015-08-26T17:14:06.4243837+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe9d0a1a-2a91-4342-ba11-1cb97c6ce833">
      <Output>
        <StdOut>Given I am on the index page
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I am on the index page")]
        public void GivenIAmOnTheIndexPage()
        {
            ScenarioContext.Current.Pending();
        }

When I enter my unsername nad password
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I enter my unsername nad password")]
        public void WhenIEnterMyUnsernameNadPassword()
        {
            ScenarioContext.Current.Pending();
        }

And I click the login button
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I click the login button")]
        public void WhenIClickTheLoginButton()
        {
            ScenarioContext.Current.Pending();
        }

Then the welcome page should be displayed
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the welcome page should be displayed")]
        public void ThenTheWelcomePageShouldBeDisplayed()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I am on the index page")]
        public void GivenIAmOnTheIndexPage()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I enter my unsername nad password")]
        public void WhenIEnterMyUnsernameNadPassword()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I click the login button")]
        public void WhenIClickTheLoginButton()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the welcome page should be displayed")]
        public void ThenTheWelcomePageShouldBeDisplayed()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\09CallingStepsFromSteps\CallingStepsFromSteps.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature.LogIn() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\09CallingStepsFromSteps\CallingStepsFromSteps.feature:line 10
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2c7bf520-0611-4eca-9f6d-c228a66f3f20" testId="416376aa-6b4e-d71b-6e9d-30e5903109e5" testName="StepsWithNon_StringArguments" computerName="WANTALMOST-V7" duration="00:00:00.0332674" startTime="2015-08-26T17:14:06.4313809+08:00" endTime="2015-08-26T17:14:06.4833601+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c7bf520-0611-4eca-9f6d-c228a66f3f20">
      <Output>
        <StdOut>Given Dan has been registered at date 2003/03/13
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"Dan has been registered at date (.*)/(.*)")]
        public void GivenDanHasBeenRegisteredAtDate(string p0, int p1)
        {
            ScenarioContext.Current.Pending();
        }

And Aslak has been registered at terminal 2
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"Aslak has been registered at terminal (.*)")]
        public void GivenAslakHasBeenRegisteredAtTerminal(int p0)
        {
            ScenarioContext.Current.Pending();
        }

Then I should be able to see Aslak at terminal 2
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"I should be able to see Aslak at terminal (.*)")]
        public void ThenIShouldBeAbleToSeeAslakAtTerminal(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"Dan has been registered at date (.*)/(.*)")]
        public void GivenDanHasBeenRegisteredAtDate(string p0, int p1)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Given(@"Aslak has been registered at terminal (.*)")]
        public void GivenAslakHasBeenRegisteredAtTerminal(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"I should be able to see Aslak at terminal (.*)")]
        public void ThenIShouldBeAbleToSeeAslakAtTerminal(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._10StepTransformation.StepArgumentTransformationsFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\10StepTransformation\StepTransformation.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._10StepTransformation.StepArgumentTransformationsFeature.StepsWithNon_StringArguments() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\10StepTransformation\StepTransformation.feature:line 9
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3cb90dba-819c-4914-8398-5560a6ad21a4" testId="4935f965-628b-b964-d5da-bb8013d5b804" testName="FeatureWithADependentContext" computerName="WANTALMOST-V7" duration="00:00:00.0046938" startTime="2015-08-26T17:14:06.4853593+08:00" endTime="2015-08-26T17:14:06.4943557+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3cb90dba-819c-4914-8398-5560a6ad21a4">
      <Output>
        <StdOut>Given a feature which requires a single context
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"a feature which requires a single context")]
        public void GivenAFeatureWhichRequiresASingleContext()
        {
            ScenarioContext.Current.Pending();
        }

Then the context is set
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the context is set")]
        public void ThenTheContextIsSet()
        {
            ScenarioContext.Current.Pending();
        }

And the context was created by the feature with a single context scenario
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the context was created by the feature with a single context scenario")]
        public void ThenTheContextWasCreatedByTheFeatureWithASingleContextScenario()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"a feature which requires a single context")]
        public void GivenAFeatureWhichRequiresASingleContext()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the context is set")]
        public void ThenTheContextIsSet()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the context was created by the feature with a single context scenario")]
        public void ThenTheContextWasCreatedByTheFeatureWithASingleContextScenario()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\11ContextInjection\ContextInjection.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.FeatureWithADependentContext() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\11ContextInjection\ContextInjection.feature:line 28
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="072776e5-1efa-4f94-948f-651838a11898" testId="a00db395-b235-f59e-128e-f4b054e851fe" testName="FeatureWithASingleContext" computerName="WANTALMOST-V7" duration="00:00:00.0032330" startTime="2015-08-26T17:14:06.4963549+08:00" endTime="2015-08-26T17:14:06.5013529+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="072776e5-1efa-4f94-948f-651838a11898">
      <Output>
        <StdOut>Given a feature which requires a single context
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"a feature which requires a single context")]
        public void GivenAFeatureWhichRequiresASingleContext()
        {
            ScenarioContext.Current.Pending();
        }

Then the context is set
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the context is set")]
        public void ThenTheContextIsSet()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"a feature which requires a single context")]
        public void GivenAFeatureWhichRequiresASingleContext()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the context is set")]
        public void ThenTheContextIsSet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\11ContextInjection\ContextInjection.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.FeatureWithASingleContext() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\11ContextInjection\ContextInjection.feature:line 14
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="abc9d635-8ce1-4619-96af-787bb4cf3a16" testId="3d277fd3-faf8-4b8a-c115-f4d2ca70f1bb" testName="FeatureWithMultipleContexts" computerName="WANTALMOST-V7" duration="00:00:00.0040975" startTime="2015-08-26T17:14:06.5033521+08:00" endTime="2015-08-26T17:14:06.5113489+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abc9d635-8ce1-4619-96af-787bb4cf3a16">
      <Output>
        <StdOut>Given a feature which requires multiple contexts
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"a feature which requires multiple contexts")]
        public void GivenAFeatureWhichRequiresMultipleContexts()
        {
            ScenarioContext.Current.Pending();
        }

Then the contexts are set
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the contexts are set")]
        public void ThenTheContextsAreSet()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"a feature which requires multiple contexts")]
        public void GivenAFeatureWhichRequiresMultipleContexts()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the contexts are set")]
        public void ThenTheContextsAreSet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\11ContextInjection\ContextInjection.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.FeatureWithMultipleContexts() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\11ContextInjection\ContextInjection.feature:line 18
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="549bd6bb-df5c-4665-aa7c-a8f81a774386" testId="61ea2b31-2179-5990-feea-78e46e09c0c9" testName="FeatureWithNoContext" computerName="WANTALMOST-V7" duration="00:00:00.0038737" startTime="2015-08-26T17:14:06.5123485+08:00" endTime="2015-08-26T17:14:06.5183461+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="549bd6bb-df5c-4665-aa7c-a8f81a774386">
      <Output>
        <StdOut>Given a feature which requires no context
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"a feature which requires no context")]
        public void GivenAFeatureWhichRequiresNoContext()
        {
            ScenarioContext.Current.Pending();
        }

Then everything is dandy
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"everything is dandy")]
        public void ThenEverythingIsDandy()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"a feature which requires no context")]
        public void GivenAFeatureWhichRequiresNoContext()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"everything is dandy")]
        public void ThenEverythingIsDandy()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\11ContextInjection\ContextInjection.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.FeatureWithNoContext() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\11ContextInjection\ContextInjection.feature:line 10
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="de7d34fc-59ad-4097-bc42-7054371bee53" testId="2682258a-3984-0b3d-f9f6-776cf30e4949" testName="FeatureWithRecursiveContexts" computerName="WANTALMOST-V7" duration="00:00:00.0176493" startTime="2015-08-26T17:14:06.5203453+08:00" endTime="2015-08-26T17:14:06.5413369+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="de7d34fc-59ad-4097-bc42-7054371bee53">
      <Output>
        <StdOut>Given a feature which requires a recursive context
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"a feature which requires a recursive context")]
        public void GivenAFeatureWhichRequiresARecursiveContext()
        {
            ScenarioContext.Current.Pending();
        }

Then the context is set
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the context is set")]
        public void ThenTheContextIsSet()
        {
            ScenarioContext.Current.Pending();
        }

And its sub-context is set
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"its sub-context is set")]
        public void ThenItsSub_ContextIsSet()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"a feature which requires a recursive context")]
        public void GivenAFeatureWhichRequiresARecursiveContext()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the context is set")]
        public void ThenTheContextIsSet()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"its sub-context is set")]
        public void ThenItsSub_ContextIsSet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\11ContextInjection\ContextInjection.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.FeatureWithRecursiveContexts() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\11ContextInjection\ContextInjection.feature:line 23
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2ef95ef1-eefd-4fed-be70-270cff98c778" testId="8135294b-15b3-60e1-9f7a-4d7bee3f448a" testName="Nested_AddTwoNumbers" computerName="WANTALMOST-V7" duration="00:00:00.0310762" startTime="2015-08-26T17:14:06.5433361+08:00" endTime="2015-08-26T17:14:06.5893177+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ef95ef1-eefd-4fed-be70-270cff98c778">
      <Output>
        <StdOut>Given I have entered 50 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I have entered 70 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I press add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I press add")]
        public void WhenIPressAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 120 on the screen
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I press add")]
        public void WhenIPressAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._12NestedFolders.ChildFolder.ChildChildFolder.NestedFolderExampleFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\12NestedFolders\ChildFolder\ChildChildFolder\NestedFolderExample.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._12NestedFolders.ChildFolder.ChildChildFolder.NestedFolderExampleFeature.Nested_AddTwoNumbers() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\12NestedFolders\ChildFolder\ChildChildFolder\NestedFolderExample.feature:line 11
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="077ac75f-3ffe-488e-8bc3-85ee06d6aed4" testId="5d24b2e3-e9cb-1ef1-61cc-bac433923b41" testName="MutlilineOutput" computerName="WANTALMOST-V7" duration="00:00:00.0266797" startTime="2015-08-26T17:14:06.5913169+08:00" endTime="2015-08-26T17:14:06.6342997+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="077ac75f-3ffe-488e-8bc3-85ee06d6aed4">
      <Output>
        <StdOut>Given I have read in some text from the user
  --- multiline step argument ---
  This is line 1.
This is line 2!
This is line 3!!
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have read in some text from the user")]
        public void GivenIHaveReadInSomeTextFromTheUser(string multilineText)
        {
            ScenarioContext.Current.Pending();
        }

When I process this input
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I process this input")]
        public void WhenIProcessThisInput()
        {
            ScenarioContext.Current.Pending();
        }

Then the result will be saved to the multiline text data store
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result will be saved to the multiline text data store")]
        public void ThenTheResultWillBeSavedToTheMultilineTextDataStore()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have read in some text from the user")]
        public void GivenIHaveReadInSomeTextFromTheUser(string multilineText)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I process this input")]
        public void WhenIProcessThisInput()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result will be saved to the multiline text data store")]
        public void ThenTheResultWillBeSavedToTheMultilineTextDataStore()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._13MultilineText.MultilineFeatureExampleFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\13MultilineText\MultilineFeatureExample.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._13MultilineText.MultilineFeatureExampleFeature.MutlilineOutput() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\13MultilineText\MultilineFeatureExample.feature:line 15
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="05444306-9bd2-4ab7-af16-a28841b292d1" testId="fb584dad-33a2-dfcd-3459-46e9018cfc09" testName="SampleMarkdownScenarioExample" computerName="WANTALMOST-V7" duration="00:00:00.0290281" startTime="2015-08-26T17:14:06.6352993+08:00" endTime="2015-08-26T17:14:06.6812809+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05444306-9bd2-4ab7-af16-a28841b292d1">
      <Output>
        <StdOut>Given I have initialized the Sum-variable to 0
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have initialized the Sum-variable to (.*)")]
        public void GivenIHaveInitializedTheSum_VariableTo(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I add 1 to the Sum-variable
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I add (.*) to the Sum-variable")]
        public void WhenIAddToTheSum_Variable(int p0)
        {
            ScenarioContext.Current.Pending();
        }

Given this
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"this")]
        public void GivenThis()
        {
            ScenarioContext.Current.Pending();
        }

Then that
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"that")]
        public void ThenThat()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have initialized the Sum-variable to (.*)")]
        public void GivenIHaveInitializedTheSum_VariableTo(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Given(@"this")]
        public void GivenThis()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I add (.*) to the Sum-variable")]
        public void WhenIAddToTheSum_Variable(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"that")]
        public void ThenThat()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._14MarkdownExample.SampleMarkdownFeatureFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\14MarkdownExample\MarkdownExamples.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._14MarkdownExample.SampleMarkdownFeatureFeature.SampleMarkdownScenarioExample() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\14MarkdownExample\MarkdownExamples.feature:line 55
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="211e5b86-7e6b-4f5b-9bb6-95b5b596e7db" testId="2fe03437-aed7-6f93-2bca-8bd403ab6807" testName="SampleMarkdownScenarioOutlineExample_Value" computerName="WANTALMOST-V7" duration="00:00:00.0290631" startTime="2015-08-26T17:14:06.6832801+08:00" endTime="2015-08-26T17:14:06.7232641+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="211e5b86-7e6b-4f5b-9bb6-95b5b596e7db">
      <Output>
        <StdOut>Given I have initialized the Sum-variable to 0
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have initialized the Sum-variable to (.*)")]
        public void GivenIHaveInitializedTheSum_VariableTo(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I add 1 to the Sum-variable
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I add (.*) to the Sum-variable")]
        public void WhenIAddToTheSum_Variable(int p0)
        {
            ScenarioContext.Current.Pending();
        }

Given this: value
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"this: value")]
        public void GivenThisValue()
        {
            ScenarioContext.Current.Pending();
        }

Then that: value2
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"that: value(.*)")]
        public void ThenThatValue(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have initialized the Sum-variable to (.*)")]
        public void GivenIHaveInitializedTheSum_VariableTo(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Given(@"this: value")]
        public void GivenThisValue()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I add (.*) to the Sum-variable")]
        public void WhenIAddToTheSum_Variable(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"that: value(.*)")]
        public void ThenThatValue(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._14MarkdownExample.SampleMarkdownFeatureFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\14MarkdownExample\MarkdownExamples.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._14MarkdownExample.SampleMarkdownFeatureFeature.SampleMarkdownScenarioOutlineExample(String test, String test2, String[] exampleTags) in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\14MarkdownExample\MarkdownExamples.feature:line 65
   at SpecFlowWithEf.Tests.Features._14MarkdownExample.SampleMarkdownFeatureFeature.SampleMarkdownScenarioOutlineExample_Value() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\14MarkdownExample\MarkdownExamples.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="53586ee3-a180-4c9f-a0d3-63b48d9fca3b" testId="b6262163-a9e4-5cef-a621-cf72819b91a2" testName="ScenarioWithLargeDataTable" computerName="WANTALMOST-V7" duration="00:00:00.0199980" startTime="2015-08-26T17:14:06.7252633+08:00" endTime="2015-08-26T17:14:06.7622485+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53586ee3-a180-4c9f-a0d3-63b48d9fca3b">
      <Output>
        <StdOut>Given a feature with a large table of data:
  --- table step argument ---
  | heading    | page # |
  | Chapter 1  | 1      |
  | Chapter 2  | 5      |
  | Chapter 3  | 10     |
  | Chapter 4  | 15     |
  | Chapter 5  | 20     |
  | Chapter 6  | 25     |
  | Chapter 7  | 30     |
  | Chapter 8  | 35     |
  | Chapter 9  | 40     |
  | Chapter 10 | 45     |
  | Chapter 11 | 50     |
  | Chapter 12 | 55     |
  | Chapter 13 | 60     |
  | Chapter 14 | 65     |
  | Chapter 15 | 70     |
  | Chapter 16 | 75     |
  | Chapter 17 | 80     |
  | Chapter 18 | 85     |
  | Chapter 19 | 90     |
  | Chapter 20 | 95     |
  | Chapter 21 | 100    |
  | Chapter 22 | 105    |
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"a feature with a large table of data:")]
        public void GivenAFeatureWithALargeTableOfData(Table table)
        {
            ScenarioContext.Current.Pending();
        }

When I click on the table heading
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I click on the table heading")]
        public void WhenIClickOnTheTableHeading()
        {
            ScenarioContext.Current.Pending();
        }

Then the table body should collapse
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the table body should collapse")]
        public void ThenTheTableBodyShouldCollapse()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"a feature with a large table of data:")]
        public void GivenAFeatureWithALargeTableOfData(Table table)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I click on the table heading")]
        public void WhenIClickOnTheTableHeading()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the table body should collapse")]
        public void ThenTheTableBodyShouldCollapse()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features._15Pickles.InteractiveDHTMLViewFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\15Pickles\InteractiveDHTMLView.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features._15Pickles.InteractiveDHTMLViewFeature.ScenarioWithLargeDataTable() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\15Pickles\InteractiveDHTMLView.feature:line 33
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="82db1f5e-d4d6-4576-8fc3-d8f8ce7c87e3" testId="7021b6a2-5d16-7f95-4d4f-ce4896024259" testName="AddTwoNumbers" computerName="WANTALMOST-V7" duration="00:00:00.0101443" startTime="2015-08-26T17:14:06.7632481+08:00" endTime="2015-08-26T17:14:06.7832401+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="82db1f5e-d4d6-4576-8fc3-d8f8ce7c87e3">
      <Output>
        <StdOut>Given I have entered 50 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I have entered 70 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I press add
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I press add")]
        public void WhenIPressAdd()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 120 on the screen
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I press add")]
        public void WhenIPressAdd()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features.ArithmeticFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Arithmetic.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features.ArithmeticFeature.AddTwoNumbers() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Arithmetic.feature:line 11
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c2e9d448-ae9d-4588-a76a-e82e8817a17b" testId="f55c1c9d-9143-dfd3-930d-8aed0cb66071" testName="DivideTwoNumbers" computerName="WANTALMOST-V7" duration="00:00:00.0124220" startTime="2015-08-26T17:14:06.7852393+08:00" endTime="2015-08-26T17:14:06.8022325+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2e9d448-ae9d-4588-a76a-e82e8817a17b">
      <Output>
        <StdOut>Given I have entered 50 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I have entered 2 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I press divide
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I press divide")]
        public void WhenIPressDivide()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 25 on the screen
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I press divide")]
        public void WhenIPressDivide()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features.ArithmeticFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Arithmetic.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features.ArithmeticFeature.DivideTwoNumbers() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Arithmetic.feature:line 32
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="28e56819-543b-4ebb-874e-022c9cc81ddb" testId="2a414629-7763-fb35-3c7a-406c4ff3a47b" testName="MultiplyTwoNumbers" computerName="WANTALMOST-V7" duration="00:00:00.0110083" startTime="2015-08-26T17:14:06.8052313+08:00" endTime="2015-08-26T17:14:06.8202253+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28e56819-543b-4ebb-874e-022c9cc81ddb">
      <Output>
        <StdOut>Given I have entered 50 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I have entered 70 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I press multiply
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I press multiply")]
        public void WhenIPressMultiply()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 3500 on the screen
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I press multiply")]
        public void WhenIPressMultiply()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features.ArithmeticFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Arithmetic.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features.ArithmeticFeature.MultiplyTwoNumbers() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Arithmetic.feature:line 25
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1fd790ab-fc1b-400c-9f88-1f5351ccc2e2" testId="a6d320e7-2596-0a53-040b-2968bf247b96" testName="SubtractTwoNumbers" computerName="WANTALMOST-V7" duration="00:00:00.0229001" startTime="2015-08-26T17:14:06.8222245+08:00" endTime="2015-08-26T17:14:06.8492137+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1fd790ab-fc1b-400c-9f88-1f5351ccc2e2">
      <Output>
        <StdOut>Given I have entered 50 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I have entered 70 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I press subtract
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I press subtract")]
        public void WhenIPressSubtract()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be -20 on the screen
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I press subtract")]
        public void WhenIPressSubtract()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features.ArithmeticFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Arithmetic.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features.ArithmeticFeature.SubtractTwoNumbers() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Arithmetic.feature:line 18
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8389d803-ffac-4785-94a5-58c7a016f88d" testId="d67f199d-0cf1-55f8-f698-e7660404c744" testName="依據姓名訂單日期迄的條件查出顧客的訂單" computerName="WANTALMOST-V7" duration="00:00:05.5704298" startTime="2015-08-26T17:14:06.8512129+08:00" endTime="2015-08-26T17:14:12.4269813+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8389d803-ffac-4785-94a5-58c7a016f88d">
      <Output>
        <StdOut>Given 查詢條件為
  --- table step argument ---
  | CustomerId | OrderDateStart | OrderDateEnd |
  | Joey       |                | 2014-07-04   |
-&gt; done: OrderQuerySteps.Given查詢條件為(&lt;table&gt;) (0.0s)
And 預計Customers資料應有
  --- table step argument ---
  | CustomerID | CompanyName |
  | Joey       | SkillTree   |
-&gt; done: OrderQuerySteps.Given預計Customers資料應有(&lt;table&gt;) (0.7s)
And 預計Orders資料應有
  --- table step argument ---
  | CustomerID | OrderDate  | ShipCity |
  | Joey       | 2014-07-02 | Taipei   |
  | Joey       | 2014-07-03 | Taipei   |
  | Joey       | 2014-07-04 | Changhua |
  | Joey       | 2014-07-05 | Changhua |
  | Joey       | 2014-07-08 | Changhua |
-&gt; done: OrderQuerySteps.Given預計Orders資料應有(&lt;table&gt;) (0.2s)
When 呼叫Query方法
-&gt; done: OrderQuerySteps.When呼叫Query方法() (1.1s)
Then 查詢結果應為
  --- table step argument ---
  | CustomerID | OrderDate  | ShipCity |
  | Joey       | 2014-07-02 | Taipei   |
  | Joey       | 2014-07-03 | Taipei   |
  | Joey       | 2014-07-04 | Changhua |
-&gt; done: OrderQuerySteps.Then查詢結果應為(&lt;table&gt;) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="909f2fa8-bfd6-47a8-94bf-7c2868ee6fa2" testId="9ef2b9e7-687b-d98f-d478-0d14a0b8fcb1" testName="依據姓名訂單日期起的條件查出顧客的訂單" computerName="WANTALMOST-V7" duration="00:00:00.5640597" startTime="2015-08-26T17:14:12.4289805+08:00" endTime="2015-08-26T17:14:12.9947541+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="909f2fa8-bfd6-47a8-94bf-7c2868ee6fa2">
      <Output>
        <StdOut>Given 查詢條件為
  --- table step argument ---
  | CustomerId | OrderDateStart | OrderDateEnd |
  | Joey       | 2014-07-03     |              |
-&gt; done: OrderQuerySteps.Given查詢條件為(&lt;table&gt;) (0.0s)
And 預計Customers資料應有
  --- table step argument ---
  | CustomerID | CompanyName |
  | Joey       | SkillTree   |
-&gt; done: OrderQuerySteps.Given預計Customers資料應有(&lt;table&gt;) (0.0s)
And 預計Orders資料應有
  --- table step argument ---
  | CustomerID | OrderDate  | ShipCity |
  | Joey       | 2014-07-02 | Taipei   |
  | Joey       | 2014-07-03 | Taipei   |
  | Joey       | 2014-07-04 | Changhua |
  | Joey       | 2014-07-05 | Changhua |
  | Joey       | 2014-07-08 | Changhua |
-&gt; done: OrderQuerySteps.Given預計Orders資料應有(&lt;table&gt;) (0.3s)
When 呼叫Query方法
-&gt; done: OrderQuerySteps.When呼叫Query方法() (0.1s)
Then 查詢結果應為
  --- table step argument ---
  | CustomerID | OrderDate  | ShipCity |
  | Joey       | 2014-07-03 | Taipei   |
  | Joey       | 2014-07-04 | Changhua |
  | Joey       | 2014-07-05 | Changhua |
  | Joey       | 2014-07-08 | Changhua |
-&gt; done: OrderQuerySteps.Then查詢結果應為(&lt;table&gt;) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="987be41e-00ee-4596-b0c8-2bf1ed31036e" testId="40d16aa0-0970-a41c-fa88-b5585f03c35e" testName="依據姓名訂單日期起訂單日期迄條件查出顧客的訂單" computerName="WANTALMOST-V7" duration="00:00:01.0112324" startTime="2015-08-26T17:14:13.1147061+08:00" endTime="2015-08-26T17:14:14.1283005+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="987be41e-00ee-4596-b0c8-2bf1ed31036e">
      <Output>
        <StdOut>Given 查詢條件為
  --- table step argument ---
  | CustomerId | OrderDateStart | OrderDateEnd |
  | Joey       | 2014-07-03     | 2014-07-07   |
-&gt; done: OrderQuerySteps.Given查詢條件為(&lt;table&gt;) (0.0s)
And 預計Customers資料應有
  --- table step argument ---
  | CustomerID | CompanyName |
  | Joey       | SkillTree   |
-&gt; done: OrderQuerySteps.Given預計Customers資料應有(&lt;table&gt;) (0.0s)
And 預計Orders資料應有
  --- table step argument ---
  | CustomerID | OrderDate  | ShipCity |
  | Joey       | 2014-07-02 | Taipei   |
  | Joey       | 2014-07-03 | Taipei   |
  | Joey       | 2014-07-04 | Changhua |
  | Joey       | 2014-07-05 | Changhua |
  | Joey       | 2014-07-08 | Changhua |
-&gt; done: OrderQuerySteps.Given預計Orders資料應有(&lt;table&gt;) (0.2s)
When 呼叫Query方法
-&gt; done: OrderQuerySteps.When呼叫Query方法() (0.4s)
Then 查詢結果應為
  --- table step argument ---
  | CustomerID | OrderDate  | ShipCity |
  | Joey       | 2014-07-03 | Taipei   |
  | Joey       | 2014-07-04 | Changhua |
  | Joey       | 2014-07-05 | Changhua |
-&gt; done: OrderQuerySteps.Then查詢結果應為(&lt;table&gt;) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c4d351d7-3114-455f-8544-1db1d6e891c3" testId="692c0d07-86a5-0c01-4328-f20ea90fac30" testName="Cosine" computerName="WANTALMOST-V7" duration="00:00:00.0043349" startTime="2015-08-26T17:14:14.1293001+08:00" endTime="2015-08-26T17:14:14.1362973+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c4d351d7-3114-455f-8544-1db1d6e891c3">
      <Output>
        <StdOut>Given I have entered 0 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I press cos
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I press cos")]
        public void WhenIPressCos()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 1 on the screen
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I press cos")]
        public void WhenIPressCos()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features.TrigonometryFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Trigonometry.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features.TrigonometryFeature.Cosine() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Trigonometry.feature:line 16
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="885096a6-d73a-4415-b361-0ab722b9e838" testId="79dc898b-b126-08b0-d8c8-d3f836a7f12c" testName="Sine" computerName="WANTALMOST-V7" duration="00:00:00.0045968" startTime="2015-08-26T17:14:14.1382965+08:00" endTime="2015-08-26T17:14:14.1452937+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="885096a6-d73a-4415-b361-0ab722b9e838">
      <Output>
        <StdOut>Given I have entered 90 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I press sin
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I press sin")]
        public void WhenIPressSin()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 1 on the screen
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I press sin")]
        public void WhenIPressSin()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features.TrigonometryFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Trigonometry.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features.TrigonometryFeature.Sine() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Trigonometry.feature:line 10
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a0ac1d15-2997-4939-bfff-a800d21eccfd" testId="8c2db212-f1a5-7d15-c14f-75b017719c29" testName="Tangent" computerName="WANTALMOST-V7" duration="00:00:00.0041807" startTime="2015-08-26T17:14:14.1472929+08:00" endTime="2015-08-26T17:14:14.1532905+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a0ac1d15-2997-4939-bfff-a800d21eccfd">
      <Output>
        <StdOut>Given I have entered 45 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I press tan
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I press tan")]
        public void WhenIPressTan()
        {
            ScenarioContext.Current.Pending();
        }

Then the result should be 1 on the screen
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I press tan")]
        public void WhenIPressTan()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the result should be (.*) on the screen")]
        public void ThenTheResultShouldBeOnTheScreen(int p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features.TrigonometryFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Trigonometry.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features.TrigonometryFeature.Tangent() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Trigonometry.feature:line 22
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1db1164a-69ba-4c64-9635-39b8deadc152" testId="e72aa82a-5639-ddc2-819f-95e4564f28a8" testName="ClearTheScreen" computerName="WANTALMOST-V7" duration="00:00:00.0049942" startTime="2015-08-26T17:14:14.1552897+08:00" endTime="2015-08-26T17:14:14.1642861+08:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1db1164a-69ba-4c64-9635-39b8deadc152">
      <Output>
        <StdOut>Given I have entered 50 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

And I have entered 70 into the calculator
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }

When I press C
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"I press C")]
        public void WhenIPressC()
        {
            ScenarioContext.Current.Pending();
        }

Then the screen should be empty
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"the screen should be empty")]
        public void ThenTheScreenShouldBeEmpty()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredIntoTheCalculator(int p0)
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"I press C")]
        public void WhenIPressC()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"the screen should be empty")]
        public void ThenTheScreenShouldBeEmpty()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at SpecFlowWithEf.Tests.Features.Workflow.ClearingScreenFeature.ScenarioCleanup() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Workflow\ClearingScreen.feature.cs:line 0
   at SpecFlowWithEf.Tests.Features.Workflow.ClearingScreenFeature.ClearTheScreen() in c:\Users\joeychen\Dropbox\skill tree 課程\201510 第四梯\lab\day3-lab-source\lab12-Living Document\SpecFlowWithEf.Tests\features\Workflow\ClearingScreen.feature:line 11
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
  </Results>
</TestRun>